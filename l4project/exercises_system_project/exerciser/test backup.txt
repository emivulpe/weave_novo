from django.test import TestCase, Client
from exerciser.models import Application, User, Teacher, Step, Group, AcademicYear, Student, Question, Option
from django.utils import timezone
from django.core.urlresolvers import reverse
from django.conf import settings
from django.utils.importlib import import_module

#imports for views
from django.core.urlresolvers import reverse


"""
# models test
class ApplicationTest(TestCase):

	def test_application_creation(self):
		app = Application.objects.get_or_create(name = 'test app')[0]
		self.assertTrue(isinstance(app, Application))
		self.assertEqual(app.__unicode__(), app.name)
		
		
class IndexViewTests(TestCase):

	def test_index_view_with_no_applications(self):
		response = self.client.get(reverse('index'))
		self.assertEqual(response.status_code, 200)
		self.assertQuerysetEqual(response.context['applications'], [])
		
	def test_index_view_with_applications(self):
		response = self.client.get(reverse('index'))
		app = Application.objects.get_or_create(name = 'test app')[0]
		self.assertEqual(response.status_code, 200)
		self.assertEqual((response.context['applications'] >= 0), True)

		
class LogInfoDbTests(TestCase):
	def setUp(self):
		# Setup Test User
		user = User.objects.create_user(
			username='test user',
			password='password'
		)
		teacher = Teacher.objects.get_or_create(user = user)[0]
		app = Application.objects.get_or_create(name = 'test app')[0]
		step = Step.objects.get_or_create(application = app, order = 1)[0]
		year = AcademicYear.objects.get_or_create(start = 2014)[0]
		group = Group.objects.get_or_create(teacher = teacher, academic_year = year, name = 'test group')[0]
		student = Student.objects.get_or_create(teacher=teacher,group=group,student_id = 'test student')[0]
		



	def test_log_info_db_valid(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  # we need to make load() work, or the cookie isworthless
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user', 'year':2014, 'group':'test group', 'student': 'test student'})
		session.save()

		response = c.post(reverse('log_info_db'), {'time': 20, 'step': 1, 'direction' : 'next', 'example_name':'test app'})
		self.assertEqual(response.status_code, 200)

	def test_log_info_db_invalid_data(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  # we need to make load() work, or the cookie isworthless
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user', 'group' : 'test group', 'year':2014})
		session.save()

		response = c.post(reverse('log_info_db'), {'time': 20, 'step': 1, 'direction' : 'back', 'example_name':'invalid app'})
		self.assertEqual(response.status_code, 200)

		
	def test_log_info_db_invalid_key(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  # we need to make load() work, or the cookie isworthless
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user'})
		session.save()

		response = c.post(reverse('log_info_db'), {'invalid key': 20, 'step': 1, 'direction' : 'next', 'example_name':'test app'})
		self.assertEqual(response.status_code, 200)
		
		
class LogQuestionInfoDbTests(TestCase):
	def setUp(self):
		# Setup Test User
		user = User.objects.create_user(
			username='test user',
			password='password'
		)
		teacher = Teacher.objects.get_or_create(user = user)[0]
		app = Application.objects.get_or_create(name = 'test app')[0]
		step = Step.objects.get_or_create(application = app, order = 1)[0]
		year = AcademicYear.objects.get_or_create(start = 2014)[0]
		group = Group.objects.get_or_create(teacher = teacher, academic_year = year, name = 'test group')[0]
		student = Student.objects.get_or_create(teacher=teacher,group=group,student_id = 'test student')[0]
		question = Question.objects.get_or_create(application = app, step = step, question_text = 'test question')[0]
		option = Option.objects.get_or_create(question = question, number = 1, content = 'test option')[0]

	def test_log_question_info_db_valid(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  # we need to make load() work, or the cookie isworthless
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user', 'year':2014, 'group':'test group', 'student': 'test student'})
		session.save()

		response = c.post(reverse('log_question_info_db'), {'time': 20, 'step': 1, 'direction' : 'next', 'example_name':'test app','answer':'test option','multiple_choice':'true'})
		self.assertEqual(response.status_code, 200)

	def test_log_question_info_db_invalid_data(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user', 'group' : 'test group', 'year':2014})
		session.save()

		response = c.post(reverse('log_question_info_db'), {'time': 20, 'step': 1, 'direction' : 'next', 'example_name':'invalid app','answer':'test option','multiple_choice':'true'})
		self.assertEqual(response.status_code, 200)
		
	def test_log_question_info_db_invalid_option(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user', 'group' : 'test group', 'year':2014})
		session.save()

		response = c.post(reverse('log_question_info_db'), {'time': 20, 'step': 1, 'direction' : 'next', 'example_name':'test app','answer':'invalid option','multiple_choice':'true'})
		self.assertEqual(response.status_code, 200)
		
	def test_log_question_info_db_invalid_key(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  # we need to make load() work, or the cookie isworthless
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user'})
		session.save()

		response = c.post(reverse('log_question_info_db'), {'invalid key': 20, 'step': 1, 'direction' : 'next', 'example_name':'test app','answer':'test option','multiple_choice':'true'})
		self.assertEqual(response.status_code, 200)
		
		
		
class StudentGroupListTests(TestCase):
	def setUp(self):
		# Setup Test User
		user = User.objects.create_user(
			username='test user',
			password='password'
		)
		teacher = Teacher.objects.get_or_create(user = user)[0]
		year = AcademicYear.objects.get_or_create(start = 2014)[0]
		group = Group.objects.get_or_create(teacher = teacher, academic_year = year, name = 'test group')[0]
		

	def test_student_group_list_valid(self):
		c = Client()
		response = c.get(reverse('student_group_list'), {'teacher': 'test user', 'year':2014, 'group':'test group'})
		self.assertEqual(response.status_code, 200)
		
	def test_student_group_list_invalid_data(self):
		c = Client()
		response = c.get(reverse('student_group_list'), {'teacher': 'invalid user', 'year':2014, 'group':'test group'})
		self.assertEqual(response.status_code, 200)
		
	def test_student_group_list_invalid_key(self):
		c = Client()
		response = c.get(reverse('student_group_list'), {'invalid': 'test user', 'year':2014, 'group':'test group'})
		self.assertEqual(response.status_code, 200)
		
class CreateGroupTests(TestCase):
	def setUp(self):
		# Setup Test User
		user = User.objects.create_user(
			username='test user',
			password='password'
		)
		teacher = Teacher.objects.get_or_create(user = user)[0]
		year = AcademicYear.objects.get_or_create(start = 2014)[0]
		group = Group.objects.get_or_create(teacher = teacher, academic_year = year, name = 'test group')[0]
		

	def test_create_group_valid(self):
		c = Client()
		response = c.post(reverse('create_group'), {'teacher': 'test user', 'year':2014, 'group':'new group','num_students':10})
		self.assertEqual(response.status_code, 200)

	def test_create_group_invalid_data(self):
		c = Client()
		response = c.post(reverse('create_group'), {'teacher': 'invalid user', 'year':2014, 'group':'test group','num_students':10})
		self.assertEqual(response.status_code, 200)
		

	def test_create_group_invalid_key(self):
		c = Client()
		response = c.post(reverse('create_group'), {'invalid keys': 'test user', 'year':2014, 'group':'test group','num_students':10})
		self.assertEqual(response.status_code, 200)
"""
class DeleteGroupTests(TestCase):
	def setUp(self):
		# Setup Test User
		user = User.objects.create_user(
			username='test user',
			password='password'
		)
		teacher = Teacher.objects.get_or_create(user = user)[0]
		year = AcademicYear.objects.get_or_create(start = 2014)[0]
		group = Group.objects.get_or_create(teacher = teacher, academic_year = year, name = 'test group')[0]
		

	def test_delete_group_valid(self):
		c = Client()
		response = c.post(reverse('delete_group'), {'teacher': 'test user', 'year':2014, 'group':'test group'})
		self.assertEqual(response.status_code, 200)

	def test_delete_group_invalid_data(self):
		c = Client()
		response = c.post(reverse('delete_group'), {'teacher': 'invalid user', 'year':2014, 'group':'test group'})
		self.assertEqual(response.status_code, 200)
		

	def test_delete_group_invalid_key(self):
		c = Client()
		response = c.post(reverse('delete_group'), {'invalid keys': 'test user', 'year':2014, 'group':'test group'})
		self.assertEqual(response.status_code, 200)


class UpdateGroupTests(TestCase):
	def setUp(self):
		# Setup Test User
		user = User.objects.create_user(
			username='test user',
			password='password'
		)
		teacher = Teacher.objects.get_or_create(user = user)[0]
		year = AcademicYear.objects.get_or_create(start = 2014)[0]
		group = Group.objects.get_or_create(teacher = teacher, academic_year = year, name = 'test group')[0]
		

	def test_update_group_valid(self):
		c = Client()
		response = c.post(reverse('update_group'), {'teacher': 'test user', 'year':2014, 'group':'test group','num_students':10})
		self.assertEqual(response.status_code, 200)

	def test_update_group_invalid_data(self):
		c = Client()
		response = c.post(reverse('update_group'), {'teacher': 'invalid user', 'year':2014, 'group':'test group','num_students':10})
		self.assertEqual(response.status_code, 200)
		

	def test_update_group_invalid_key(self):
		c = Client()
		response = c.post(reverse('update_group'), {'invalid keys': 'test user', 'year':2014, 'group':'test group','num_students':10})
		self.assertEqual(response.status_code, 200)
		
		
class RegisterGroupWithSessionTests(TestCase):
	def setUp(self):
		# Setup Test User
		user = User.objects.create_user(
			username='test user',
			password='password'
		)
		teacher = Teacher.objects.get_or_create(user = user)[0]
		year = AcademicYear.objects.get_or_create(start = 2014)[0]
		group = Group.objects.get_or_create(teacher = teacher, academic_year = year, name = 'test group')[0]
		

	def test_register_group_with_session_valid(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user', 'year':2014})
		session.save()
		response = c.post(reverse('register_group_with_session'), {'group' : 'test group'})
		self.assertEqual(response.status_code, 200)

	def test_register_group_with_session_invalid_data(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user', 'year':2014})
		session.save()
		response = c.post(reverse('register_group_with_session'), {'group' : 'invalid group'})
		self.assertEqual(response.status_code, 200)
		

	def test_register_group_with_session_invalid_key(self):
		c = Client()
		c.login(username='test user',password='password')
		engine = import_module(settings.SESSION_ENGINE)
		store = engine.SessionStore()
		store.save()  
		c.cookies[settings.SESSION_COOKIE_NAME] = store.session_key
		session = c.session
		session.update({'teacher': 'test user', 'year':2014})
		session.save()
		response = c.post(reverse('register_group_with_session'), {'invalid key' : 'test group'})
		self.assertEqual(response.status_code, 200)
		
class SaveSessionTests(TestCase):