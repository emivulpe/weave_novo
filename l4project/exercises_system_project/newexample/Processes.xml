<?xml version="1.0" ?>
<processes>
<process name ="DrawingClockProgram" app = "ClockExample" processID ="00000000-0000-0000-0000-00000000003f">
<step num = "1">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000007">Problem : Write a program to place the numbers 1 to 12 as if they were on a clock face.;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000009">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000008">-------------------------------------------------------------------------------------------------------------------------------------------;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here is the problem.</explanation>
</step>
<step num = "2">
<explanation>What kind of context is this?  What libraries do we need?  We've seen textual output and now Canvas or graphical output.</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000020">complete();</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000001f"> ;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000000e">from Canvas import * ;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000000d"> ;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000000c"># Quintin Cutts 8 - 11 - 2013 ;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000000b"># if they were on a clock face. ;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000000a"># Write a program to place the numbers 1 to 12 as  ;</fragname>
<operation>Insert</operation>
</change>
<explanation>It's graphical, so let's put the essentials into the program ? we need to import the Canvas library and when drawing a picture, we need to finish the program with a call to the complete function.</explanation>
</step>
<step num = "4">
<explanation>Is the solution to this problem principally a loop, a conditional or a sequence?</explanation>
</step>
<step num = "5">
<explanation>It's a loop.  Why?  Because we've got these 12 numbers to print out ? so we're doing something 12 times.</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000001b">    hour = hour + 1 ;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000015"> ;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000000f"> ;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000016">while hour &lt;= 12: ;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000010">hour = 1 ;</fragname>
<operation>Insert</operation>
</change>
<explanation>Let's create that bit.  We need a stepper variable to take us through the 12 hours, from 1 to 12, and the while loop structure?</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000001a">    print hour ;</fragname>
<operation>Insert</operation>
</change>
<explanation>We could test this now by simply putting &quot;print hour&quot; into the loop body, to see if we are counting through the right hours.  </explanation>
</step>
<step num = "8">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000001a">    print hour ;</fragname>
<operation>Delete</operation>
</change>
<explanation>Ok, that works correctly.  Note I've removed the testing code that prints out the hour value.  Now we need to put the hour numbers in the right places.  Considering the graphical drawing tools we've seen, can you think how to do this?</explanation>
</step>
<step num = "9">
<explanation>Well, in case you need them, here are some hints:  The numbers lie on a circle.  You've seen functions that, given a starting point, angle and length, give you the point at the end of a line of the given length running from the starting point at the given angle.  Can you see what we need to do?</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000015"> ;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000014">y_centre = 100 ;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000013">x_centre = 100 ;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000012">radius = 80 ;</fragname>
<operation>Insert</operation>
</change>
<explanation>We need a centre point and a radius.</explanation>
</step>
<step num = "11">
<explanation>We need a starting angle.  Straight down is 0 degrees (e.g. the six o'clock angular position) and it increases anticlockwise.  What is angular position therefore of 1 o'clock?</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000011">angle = 150 ;</fragname>
<operation>Insert</operation>
</change>
<explanation>Well, there are 12 hours, and 360 degrees, in a circle, so the angular distance between each hour is 30 degrees.    Hence the 1 o'clock position is five hours around, or an angular distance of 150 degrees.  This is what we'll set the angle variable to?</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000017">    num_x,  num_y = end_point( x_centre, y_centre, radius, angle ) ;</fragname>
<operation>Insert</operation>
</change>
<explanation>We have a centre, now we need to calculate the position at which to put the 1 o'clock digit.  We'll use the end_point function.  These will give us the x and y values respectively that we need, given that we're calling them with the centre point, radius and angle as parameters.</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000018">    create_text( num_x, num_y, text=str( hour ) ) ;</fragname>
<operation>Insert</operation>
</change>
<explanation>We now have the position of the digit.  Let's draw the hour digit, using create_text.  We pass the x, y values for the position, and then we have to use the unusual syntax for giving the text to be written itself.  We write &quot;text=&quot; because this is an optional parameter for some reason.  And hour is a number, so we need to convert it into a string, using str, before it can be displayed using create_text.</explanation>
</step>
<step num = "15">
<explanation>This is looking good.  Is anything missing, or are you ready to type it in and run it?</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000019">    angle = angle + 30 ;</fragname>
<operation>Insert</operation>
</change>
<explanation>There IS one more thing - the angle is not being updated, so all the numbers would appear in the same place!</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000001c"> ;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>ClockDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000001e">create_oval( 10,10,190,190 ) ;</fragname>
<operation>Insert</operation>
</change>
<explanation>And to finish, you can add a circle for the clock face.</explanation>
</step>
<step num = "18">
<explanation>I think we're done now.  You can use the navigation buttons to go back and explore any of the earlier steps.</explanation>
</step>
</process>
<process name ="HorizontalLinesProgram" app = "HorizontalLines" processID ="00000000-0000-0000-0000-000000000067">
<step num = "1">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000027">----------------------------------;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000026">Problem:  Draw 10 parallel horizontal lines, each 100 long, starting at (10,10) and spaced 10 apart, going downwards.;</fragname>
<operation>Insert</operation>
</change>
<explanation>This is the problem.  If you're stuck on how to solve this problem, rather than just checking a solution you already have created, then you should have Python Idle open alongside IWE, and you can type in the code as we're going along.</explanation>
</step>
<step num = "2">
<explanation>So, it's a drawing we're being asked to create, requiring graphical, not textual, output ? so what do we need at the start and end of the program?</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000002d">from Canvas import *;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000028">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000039">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000003a">complete()</fragname>
<operation>Insert</operation>
</change>
<explanation>That's right, Canvas import, and the call to complete at the end.</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000002c">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000002b"># Quintin 8 - 11 - 13;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000002a"># each 100 long, spaced 10 apart.  First line starts at (10,10);</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000029"># Write a program to draw 10 parallel horizontal lines,;</fragname>
<operation>Insert</operation>
</change>
<explanation>Note that we should always include a comment to explain what the program does, and who wrote it. </explanation>
</step>
<step num = "5">
<explanation>Is the solution to this problem principally a loop, a conditional or a sequence?</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<operation>Ask Answer</operation>
<question num = "6" content="Is the solution going to be principally a repetition, a conditional or a sequence?" type="MULTI_CHOICE">
<option num ="0"  content="Repetition (e.g. while loop)"></option>
<option num ="1"  content="Conditional (e.g. if then)"></option>
<option num ="2"  content="Sequence (e.g. just a series of steps one after another)"></option>
<option num ="3"  content="I don't know"></option>
</question>
</change>
<explanation>Don't know what to put here!!  Should the quesiton etc and my answer comment go here?</explanation>
</step>
<step num = "7">
<explanation>The question was whether the solution here is mainly a repetition, a conditional, or a sequence.  The right answer for this one is a repetition.  Why?  Because we're creating 10 very similar lines - the fixed part of the action is the line ? it's the same size/dimensions every time - only the position is changing each time.</explanation>
</step>
<step num = "8">
<explanation>Can you create the loop now?  Hold in your mind what you think is needed, and then read ahead...</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000034">    create_line( x1, y1, x2, y2 );</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000031">;</fragname>
<operation>Insert</operation>
</change>
<explanation>Did you get it?  We need a stepper variable to take us through the 10 lines, and the while loop structure?  We're going to use the stepper variable in a slightly different way this time... Let's examine the 'create_line' code that's shown above for a moment..</explanation>
</step>
<step num = "10">
<explanation>At this stage, let's not worry about the precise arguments.  If we draw a number of horizontal lines, what will change on each call to create_line?</explanation>
</step>
<step num = "11">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<operation>Ask Answer</operation>
<question num = "11" content="We are planning to draw a number of horizontal lines, using create_line.  Which arguments to create_line will change on each call?" type="MULTI_CHOICE">
<option num ="0"  content="x1 and x2"></option>
<option num ="1"  content="y1 and y2"></option>
<option num ="2"  content="x1, x2, y1 and y2"></option>
<option num ="3"  content="Some other combination"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000034">    create_line( x1, y1, x2, y2 );</fragname>
<operation>Delete</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000035">    create_line( 10, y1, 110, y2 );</fragname>
<operation>Insert</operation>
</change>
<explanation>So - it's the two y values that changes each time.  We've fixed the x values ? the start and end x values of 10 and 110, for a horizontal line 100 long - as shown here.

Now, the y values increases by 10 each time a line is drawn.  Are the two y values the same or different?
</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<operation>Ask Answer</operation>
<question num = "13" content="On each individual call to create_line, are the two y values  the same, or different?" type="MULTI_CHOICE">
<option num ="0"  content="The same"></option>
<option num ="1"  content="Different"></option>
<option num ="2"  content="I don't understand the question"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000036">    create_line( 10, y, 110, y );</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000035">    create_line( 10, y1, 110, y2 );</fragname>
<operation>Delete</operation>
</change>
<explanation>The question was whether, on each call to create_line, the values for y1 and y2 were the same or different.

They are the same.  We're drawing horizontal lines, so the y value of the start and the end is the same.  So we can fix this in our create_line call, as shown here - where we've used just one variable name for both y values.</explanation>
</step>
<step num = "15">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000037">    y = y + ??;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000032">while y &lt;= ??:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000002f">y = ??;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000002e">;</fragname>
<operation>Insert</operation>
</change>
<explanation>So having thought that through, we can now craft our while loop to suit.  Instead of counting up by 1 each time, as we have before, we can use the y value itself as a stepper.  In that case, what should the ?? fragments be replaced with, in the code above?</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<operation>Ask Answer</operation>
<question num = "16" content="What 3 values should replace the three ??s shown above?" type="MULTI_CHOICE">
<option num ="0"  content="1, 10, 1"></option>
<option num ="1"  content="10, 100, 10"></option>
<option num ="2"  content="10, 110, 10"></option>
<option num ="3"  content="I don't know"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000038">    y = y + 10;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000033">while y &lt;= 100:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000030">y = 10   # This is the value changing on each loop;</fragname>
<operation>Insert</operation>
</change>
<explanation>The question was what should replace the three ?? segments in the code that was showing.  Options were 1, 10, 1, or 10, 100, 10, or 10, 110, 10.

The correct answer is 10, 100, 10, as is now shown.  We start at y = 10 (starting at (10,10) remember).  The lines are 10 apart, so the update is to add 10 each time round the loop.  We'll therefore have drawn ten lines when y is at 100.  Once y is greater than 100, we should stop, hence continuing while y &lt;= 100.

Click forward to remove the incomplete lines.</explanation>
</step>
<step num = "18">
<change num = "1">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000002f">y = ??;</fragname>
<operation>Delete</operation>
</change>
<change num = "2">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000032">while y &lt;= ??:;</fragname>
<operation>Delete</operation>
</change>
<change num = "3">
<docname>HorizontalLinesDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000037">    y = y + ??;</fragname>
<operation>Delete</operation>
</change>
<explanation>This is looking good.  Is anything missing, or are you ready to run it?</explanation>
</step>
<step num = "19">
<explanation>I don't think so - I think we're done.</explanation>
</step>
</process>
<process name ="ListProcessingFunctionsExample" app = "ListProcessingFunctions" processID ="00b251fa-0b48-43a2-a37f-23f160a11191">
<step num = "1">
<explanation>Learning Objectives for this worked example:
1.  See how to use functions to help you process lists
2.  Understand precisely how lists are passed as arguments to functions
3.  Follow the thinking process involved in problem solving

All of these may well be of use as you consider how to solve the lab exam problem.

Be sure to read these explanation steps as you go through the worked example - they attempt to capture the experience of the expert as they solve the problem, their thinking process, and absorbing this should accelerate your learning.</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c3">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c2">second function should change words in place in the list - it does not need to return anything.;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c1">The first function should create and return a new list containing all the words, and the ;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c0">For any word that has a lowercase first letter, the first letter should be converted to upper case.;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000bf"> to see if the first letter is upper or lower case. ;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000be">They should both take a list of words and they should both check each word</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000bd">Write two functions.;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000bc">;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000bb">The Problem;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here is the problem.  Before going any further with this worked example, you should try to solve the problem yourself first, at least on paper.  You may find you can solve it without any assistance, but whether you can or you can't, you'll find that you tend to read the worked example explanations more carefully once you have had a go, as you are more immersed in the problem.</explanation>
</step>
<step num = "3">
<explanation>When starting off with a problem, an expert will be asking, and answering, a series of questions about the problem.  For a small problem like this one, the expert can do all of this in his/her head.  For a novice, it is probably better to write this all down, in sketchy note form.  It's just for you, not for anyone else, so it need not be beautiful.  So, in the explanation box down here, I'll jot down the kind of questions and answers to be thinking of...</explanation>
</step>
<step num = "4">
<explanation>How am I going to go about this?  This is a question at the tools level - can I see roughly how it's going to work?  For this step, I may well need to write some test data, play around with it, imagine I'm solving the problem on this data.  While I'm doing this playing around, I can consider how the actions I'm taking compare with the kinds of actions or tools available in the programming language.</explanation>
</step>
<step num = "5">
<explanation>In this case, the problem is not complex enough to need to write down a load of test data.  I have a list of words, some with a capitalised first letter, some without.  I need to traverse the list of words, examining each one.  For those without a capitalised first letter, I need to convert the word so that it does have a capitalised first letter.</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000cc">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000cb">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ca">          change it so that it does start with a capital;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c9">     if the word does not start with a capital letter;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c8">for each word in the list;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c7">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c6">This is a rough plan for the body of the functions;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c5">;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c4">The Plan;</fragname>
<operation>Insert</operation>
</change>
<explanation>I can convert this &quot;thinking out loud&quot; into a plan - a set of steps half way between the problem and the solution in code.  Here it is, above.</explanation>
</step>
<step num = "7">
<explanation>Now, can I solve all parts of this plan?  Do I know the Python I'll need to do this? 

For example, how do I check if the first letter of a word is lowercase? Well...
     1.  I can use the string of lowercase letters in the 'string' module, and then
     2.  test to see if the first letter is in this string - using the 'in' operator

Ok, that's good, I know how to do that bit...
</explanation>
</step>
<step num = "8">
<explanation>Can I change a letter in a string?

No - but I can create a new string by concatenating (+) two strings - , the capitalised first letter is one and the second is the rest of the letters from the old string.

Ok, it looks as though we know how to do the main bit of list/string processing.  So let's get going and write the two functions - explaining the differences as we go along.
</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e1">def capitaliseInPlace( words ):;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e0"># list supplied as parameter;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000df"># function to capitalise first letter of all words in;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000de">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d4">def capitaliseNew( words ):;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d3"># first letters.;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d2"># words in supplied list, ensuring all have capitalised;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d1"># function to create and return a list containing all;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d0">;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000cf">from string import *;</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ce">;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000cd">The Program;</fragname>
<operation>Insert</operation>
</change>
<explanation>We're going to be using items from the string module, so let's import that.  And then we have the headers for the two functions - picking appropriate names to distinguish the two.  Both take a single parameter, the list of words.</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000dd">    return newWords;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d6">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d5">    newWords = [];</fragname>
<operation>Insert</operation>
</change>
<explanation>We have the function headers now.  Next question: do these functions return anything?

In the first version, we don't want to change any of the words in the list that has been passed to the function.  Instead we will create a new list and return that, as shown here.

In the second version, we need do nothing of this kind.  Because of the way that lists are held in variables and passed to functions, any change made to a list passed to a function, while it is being manipulated by the function, will be seen in the calling context.  Hence we can update words in the list, and the changes will be reflected wherever else the list can be accessed.

If this is confusing, read the on-line text book - Sections 9.8, 9,10 and 9.11.
</explanation>
</step>
<step num = "11">
<explanation>To convert our plan into code, we are going to be writing code to traverse the list of words.  You may remember from the lectures that there are different kind of traversals.  Two of them, applied to our list of words, are:
     for word in words:
and
     for wordIndex in range( len( words ) ):
The next step asks a question about which of these should be used in our two functions
</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<operation>Ask Answer</operation>
<question num = "12" content="Two kinds of list traversals we?ve come across are: 1.)     for word in words and 2.)     for wordIndex in range( len( words ) ): Which should be used in capitaliseNew and capitaliseInPlace? " type="MULTI_CHOICE">
<option num ="0"  content="Both should use (1)"></option>
<option num ="1"  content="Both should use (2)"></option>
<option num ="2"  content="capitaliseNew should use (1), capitaliseInPlace should use (2)"></option>
<option num ="3"  content="capitaliseNew should use (2), capitaliseInPlace should use (1)"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "13">
<explanation>Question was, which kind of list traversal should we use, choosing from
1.)     for word in words:
2.)     for wordIndex in range( len( words ) ):

The answer options were
A.	Both should use (1)
B.	Both should use (2)
C.	capitaliseNew should use (1), capitaliseInPlace should use (2)
D.	capitaliseNew should use (2), capitaliseInPlace should use (1)

The issue raised in the lecture was whether, during the traversal, the contents of a list element was only being looked at, or whether it was (also) being updated.  If it's the former, then you can use (1), but if it's the latter, then (2) is needed, so that we can write the necessary code to update a list element.  capitaliseNew only needs to look at the contents of the list as any changes are being reflected in the new list, whereas capitaliseInPlace is updating the list - hence the correct answer is C.
</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c8">for each word in the list;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e2">    for wordIndex in range( len( words ) ):;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000dc">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d7">    for word in words:;</fragname>
<operation>Insert</operation>
</change>
<explanation>So we can now put in the first line of the plan for the two functions</explanation>
</step>
<step num = "15">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ca">          change it so that it does start with a capital;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c9">     if the word does not start with a capital letter;</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c8">for each word in the list;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000db">            newWords += [word];</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000da">        else:;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d9">            newWords += [upper( word[ 0 ] ) + word[ 1: ]];</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000d8">        if word[ 0 ] in lowercase:;</fragname>
<operation>Insert</operation>
</change>
<explanation>Considering only the capitaliseNew function for a moment, we can test the first character of the word we are currently looking at.  If it is lowercase, then we construct a new word as required and add it to the new list of words we are creating.  If the first letter is already uppercase, then we simply add the word directly to our list.</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e5">            words[ wordIndex ] = upper( word[ 0 ] ) + word[ 1: ];</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e4">        if word[ 0 ] in lowercase:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e3">        word = words[ wordIndex ];</fragname>
<operation>Insert</operation>
</change>
<explanation>Considering the capitaliseInPlace version, you can see that this time, if we find that the first letter of a word is lowercase, we do again construct a new version of the word, as before, but now we overwrite the original version in the list with this new version.</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000c9">     if the word does not start with a capital letter;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ca">          change it so that it does start with a capital;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e7">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e6">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ef">print w;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ee">capitaliseInPlace( w );</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ed">print w;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ec">print capitaliseNew( w );</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000ea">;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e9">w = [ &quot;fred&quot;, &quot;Bob&quot;, &quot;harry&quot; ];</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>listProcessingFunctionsDoc</docname>
<fragname id="00000000-0000-0000-0000-0000000000e8"># Testing code;</fragname>
<operation>Insert</operation>
</change>
<explanation>Finally, explore the simple testing code shown here.  There are three print statements - the first printing the list returned by capitaliseNew and the second and third of the variable w.  Predict what you think will be output by these before trying them yourself or moving to the next step.</explanation>
</step>
<step num = "18">
<explanation>This is what you'd see:

['Fred', 'Bob', 'Harry']
['fred', 'Bob', 'harry']
['Fred', 'Bob', 'Harry']

You can see that after the call to capitaliseNew, the list w is unchanged from its original form in the program.  But after the call to capitaliseInPlace, it has taken on the updated names for 'fred' and 'harry', as required.
</explanation>
</step>
<step num = "19">
<explanation>So, to conclude:

1.  See how you can write functions to process lists.  This breaks up your code, making it more readable,  You could do this for the phases of the lab exam problem.

2.  Be sure you understand the way that lists are passed to functions - so that changes made to the list inside the function are 'seen' outside the function in the calling context.

3.  When you write a function to process lists, consider whether you want to update elements inside the original list, or whether you'd rather have a new list which is an copy of the original with changes made.</explanation>
</step>
</process>
<process name ="pentagonToShapeProgram" app = "pentagonToShape" processID ="00000000-0000-0000-0000-0000000000b3">
<step num = "1">
<change num = "1">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000089"># Quintin - 8-11-13;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000088"># number of sides and side length.;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000087"># Function to draw a regular shape, given starting point,;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>pentagonDocument</docname>
<operation>Show all</operation>
</change>
<explanation>We have a different setup this time.  On the left above is a version of the pentagon program, and in the right pane we will develop a function to draw arbitrary regular shapes that is based on the pentagon code.  

The purpose of this worked example is to show how the specialist pentagon code can be made more general enabling it to draw any regular shape.</explanation>
</step>
<step num = "2">
<explanation>**Make your window bigger if you can - you can move the dividers between the panes too, for example, move the one above this pane to ensure you can see the whole explanation as well as the two code panes above.**</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a8">complete()</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a7">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a6">shape( 20,60,4,55 );</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a5">shape( 100, 180, 23, 20 );</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a4">shape( 30,30,3,30 );</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008c">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008b">from Canvas import *;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008a">;</fragname>
<operation>Insert</operation>
</change>
<explanation>Let's put in the basics - Canvas import, and some testing code, consisting of some calls that we'd expect to make to the new function, rounded off with a call to old faithful 'complete'.  

[By the way, don't get into the habit of automatically putting 'complete()' at the end of every program, as some students have done in the past.  It is **just** for Canvas programs, and even then, only for those that draw a picture and do nothing else.]
</explanation>
</step>
<step num = "4">
<explanation>Let's start by putting in the function header.  We know exactly what parameters are expected (look back at the specification).  Before going to the next step, work out what you think it should be...</explanation>
</step>
<step num = "5">
<change num = "1">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000095">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000091">): ;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000090">sideLength</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008f">numberOfSides,</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008e">startX, startY,</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008d">def shape(</fragname>
<operation>Insert</operation>
</change>
<explanation>We've been asked for four parameters and these are specified inside the brackets, with appropriate names.

You may have noticed the use of so-called &quot;camel-case&quot; when creating variable names - names made up of multiple words all pushed together.  The first word starts with a lower case letter, but then each appended word starts with a capital letter - theoretically making it both easy to type and easy to read!  You can decide whether you like it...
</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000082">    lineCount += 1;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000077">while lineCount &lt; 5:;</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000071">lineCount = 0;</fragname>
<operation>Highlight</operation>
</change>
<explanation>With the pentagon, there are 5 sides and so we repeat five times.</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a2">        lineCount += 1;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000096">    while lineCount &lt; numberOfSides:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000092">    lineCount = 0;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a3">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008f">numberOfSides,</fragname>
<operation>Highlight</operation>
</change>
<explanation>We can copy most of this straight over - just taking account of the fact that the number of sides is held in the parameter numberOfSides.</explanation>
</step>
<step num = "8">
<change num = "1">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000073">startY = 100;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000072">startX = 100;</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000082">    lineCount += 1;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000077">while lineCount &lt; 5:;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000071">lineCount = 0;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008f">numberOfSides,</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Do we need to copy over the startX, startY initialisations?</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008e">startX, startY,</fragname>
<operation>Highlight</operation>
</change>
<explanation>No.  Again, these are now parameters, and values will be supplied when the function is called.</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000075">sideLength = 50;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000074">angle = 90;</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000073">startY = 100;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000072">startX = 100;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000008e">startX, startY,</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Working down the pentagon program, what should we do with angle and sideLength?</explanation>
</step>
<step num = "11">
<change num = "1">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000093">    angle = 90;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000090">sideLength</fragname>
<operation>Highlight</operation>
</change>
<explanation>We can keep angle - this is just the starting value - this assumes that the first side drawn, no matter how many sides, always goes horizontally to the right.  And again, sideLength is now a parameter, so no explicit initialisation is now needed here.</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000009f">        startY = endY;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000009e">        startX = endX;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000009d">        # Now get ready for next line;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000009c">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000009b">        create_line( startX, startY, endX, endY );</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000009a">        # and draw it;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000099">;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000098">        endX, endY = end_point( startX, startY, sideLength, angle );</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000097">        # Generate the characteristics of the new line;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000080">    startY = endY;</fragname>
<operation>Highlight</operation>
</change>
<change num = "11">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000007f">    startX = endX;</fragname>
<operation>Highlight</operation>
</change>
<change num = "12">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000007e">    # Now get ready for next line;</fragname>
<operation>Highlight</operation>
</change>
<change num = "13">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000007c">    create_line( startX, startY, endX, endY );</fragname>
<operation>Highlight</operation>
</change>
<change num = "14">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000007b">    # and draw it;</fragname>
<operation>Highlight</operation>
</change>
<change num = "15">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000079">    endX, endY = end_point( startX, startY, sideLength, angle );</fragname>
<operation>Highlight</operation>
</change>
<change num = "16">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000078">    # Generate the characteristics of the new line;</fragname>
<operation>Highlight</operation>
</change>
<change num = "17">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000075">sideLength = 50;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "18">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000074">angle = 90;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "19">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000090">sideLength</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Much of the body of the loop copies over directly without any change at all, as shown here...</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000081">    angle += 72;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000080">    startY = endY;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000007f">    startX = endX;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000007e">    # Now get ready for next line;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000007c">    create_line( startX, startY, endX, endY );</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000007b">    # and draw it;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "7">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000079">    endX, endY = end_point( startX, startY, sideLength, angle );</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "8">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000078">    # Generate the characteristics of the new line;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>This just leaves the angle update.  What should we do with this?</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>pentagonDocument</docname>
<operation>Ask Answer</operation>
<question num = "14" content="How should the angle be updated each time around the loop?  What expression can we use to replace the 72 in the pentagon example?" type="MULTI_CHOICE">
<option num ="0"  content="Keep it the same, at 72"></option>
<option num ="1"  content="360 / numberOfSides"></option>
<option num ="2"  content="Something else"></option>
<option num ="3"  content="I don't know"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "15">
<change num = "1">
<docname>pentagonDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000081">    angle += 72;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a0">        angle += 360 / numberOfSides;</fragname>
<operation>Insert</operation>
</change>
<explanation>360 / numberOfSides looks good, eh?  (just as 72 is the result of dividing 360 by 5.

We seem to be done, so try it out now in Idle - particularly on the call
        shape( 100, 180, 23, 20)</explanation>
</step>
<step num = "16">
<explanation>It didn't join up properly on that example, did it?  Can you see why?</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000094">    angleInc = 360.0 / numberOfSides;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a1">        angle += angleInc;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>regularShapeDocument</docname>
<fragname id="00000000-0000-0000-0000-0000000000a0">        angle += 360 / numberOfSides;</fragname>
<operation>Delete</operation>
</change>
<explanation>It's that integer arithmetic again - the 360/23 is rounded down, and once you've totaled up 23 of the rounded down values, you don't end up with 360 degrees and so the shape doesn't close.

A cleaner solution is shown here.  The update value is created outside the loop, taking care of the integer arithmetic, and then referred to in the angle update statement itself.
</explanation>
</step>
</process>
<process name ="RandomLineProgram" app = "RandomLine" processID ="00000000-0000-0000-0000-000000000069">
<step num = "1">
<change num = "1">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000044">------------------------------------------------------------;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000043">Write a program to draw a random segmented line.  More precisely, the line should start at (100, 100) and consist of 10 straight segments, connected so that the end of the first line joins up with the start of the second, and so on, to form one long line.  The length and orientation of each segment should be chosen at random, between the limits 0-50 and 0-359 respectively.;</fragname>
<operation>Insert</operation>
</change>
<explanation>This is the problem.  If you're stuck on how to solve this problem, rather than just checking a solution you already have created, then you should have Python Idle open alongside IWE, and you can type in the code as we're going along.</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000060">complete();</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000004d">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000004b">from Canvas import *;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000004a">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000049"># Quintin - 8-11-13;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000048"># The line should start at (100,100).;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000047"># start of the next, each a random length (between 0-50) and orientation.;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000046"># Draw a random segmented lines.  10 segments, end of one joined to;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000045">;</fragname>
<operation>Insert</operation>
</change>
<explanation>So, it's a drawing so right away, let's add in Canvas import and the call to complete at the end, and a comment to explain what the program does.</explanation>
</step>
<step num = "3">
<explanation>We're being asked to draw 10 line segments.  Once again, this looks pretty repetitive!  It's a line, 10 times.  Yes, different lines, but still a line, each time.  

In the clock face example, we used a stepper variable going up by 1 each time to control the loop.  In the horizontal lines example, we used a characteristic of the lines, the y-value of the start/end of the line, to control the loop.

This time, is there some characteristic of the 10 lines we can use?  Or do we need a simple counting variable, counting from 1 to 10?</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>RandomLineDocument</docname>
<operation>Ask Answer</operation>
<question num = "4" content="To control the number of repeats (e.g. the number of lines we draw), can we use some characteristic of the lines themselves, as we did before, or do we need a simple counting variable?" type="MULTI_CHOICE">
<option num ="0"  content="Use some characteristic of the lines themselves"></option>
<option num ="1"  content="Use a simple counting variable"></option>
<option num ="2"  content="Something else"></option>
<option num ="3"  content="I don't understand the question"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "5">
<explanation>We asked whether we could use a characteristic of the lines as a variable to control the repetition, or whether we needed a simple counting variable.

Well - the details of the lines are going to be randomly generated, so there won't be the regular changing, or stepping, nature to the variables holding the start and end of the line.  Hence we need a simple counting variable this time.  What should this look like??</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000005e">    lineCount += 1;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000052">while lineCount &lt; 10:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000051">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000004e">lineCount = 0;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000005f">;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here it is... have I got it right...?</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000050">startY = 100;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000004f">startX = 100;</fragname>
<operation>Insert</operation>
</change>
<explanation>Yes, it is ok!  

Now, we're given the starting point of the first line segment, so let's add that in.</explanation>
</step>
<step num = "8">
<explanation>Let's simply draw the first line.  Remember, we know the start point, but the direction and length of the line are generated randomly.    Can you remember how we generate random numbers?  We need two: newLength and newAngle, the first in the range 0-50, the second in the range 0-359.  What lines do we need, do you think?</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000059">    create_line( startX, startY, endX, endY );</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000056">    endX, endY = end_point( startX, startY, newLength, newAngle );</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000055">    newAngle = randint( 0, 359 );</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000054">    newLength = randint( 0, 50 );</fragname>
<operation>Insert</operation>
</change>
<explanation>Here's all that we need to draw the first line.  Is this what you had?  Check it carefully against your solution.  Note the following:
- the module import line for the random module
- the two calls to the function randint, which returns a random number between the two supplied numbers, inclusive
- the call to the end_point function, making use of the random numbers
- the create_line call that makes use of all this</explanation>
</step>
<step num = "10">
<explanation>If we ran the code right now, as it stands above, what would we see?</explanation>
</step>
<step num = "11">
<change num = "1">
<docname>RandomLineDocument</docname>
<operation>Ask Answer</operation>
<question num = "11" content="If we ran the code above, what would we see?" type="MULTI_CHOICE">
<option num ="0"  content="A single line (all 10 lines drawn directly on top of each other)"></option>
<option num ="1"  content="The segmented line that we want, with the 10 connected sections"></option>
<option num ="2"  content="10 lines of different lengths, in a kind of star shape"></option>
<option num ="3"  content="I don't know"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "12">
<explanation>Question was what would we see if we ran the code as it stands, with options: one single line, the segmented line we want, or 10 lines of different lengths in a kind of star shape.

It's the last one we see - the length and angle of the line are changing on each repeat, but the starting point isn't.  

So what do we need to do to change this so that we get our segmented line?  How is each segment related to the next?
</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>RandomLineDocument</docname>
<operation>Ask Answer</operation>
<question num = "13" content="So how do we get the segmented line we want?" type="MULTI_CHOICE">
<option num ="0"  content="Set the end point to be the start point"></option>
<option num ="1"  content="Set the start point to be the end point"></option>
<option num ="2"  content="Create a new random start point each time"></option>
<option num ="3"  content="I don't know"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000005d">    startY = endY;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000005c">    startX = endX;</fragname>
<operation>Insert</operation>
</change>
<explanation>We need to set the start point to be the current end point.  The relationship between the individual segments is that the end of one is the start of the next.  For the first line, we set the start point to be (100,100) as specified in the problem statement.  To get ready for each subsequent line, at the end of the loop, we need to reset the start variables for x and y to be the current end point values.  On the next loop around, we'll create new end point values, and we'll have saved the current ones to serve as the starting point - exactly what we want.</explanation>
</step>
<step num = "15">
<explanation>This is looking good.  Just one thing that would improve it...</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000005b">    # Now get ready for next line;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-00000000005a">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000058">    # and draw it;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000057">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000053">    # Generate the characteristics of the new line;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>RandomLineDocument</docname>
<fragname id="00000000-0000-0000-0000-000000000051">;</fragname>
<operation>Insert</operation>
</change>
<explanation>Add a few comments and some spacing to clearly explain and show 'chunks' of activity.</explanation>
</step>
</process>
<process name ="PasswordCheckerExample" app = "PasswordChecker" processID ="7d2904ce-5ecb-41bc-8a52-075ee319066b">
<step num = "1">
<change num = "1">
<docname>passwordCheckerProblem</docname>
<fragname id="df8d741e-0836-4207-b61d-db70af613f4d">Be sure to read what is in the bottom pane of the window on every step.;</fragname>
<operation>Insert</operation>
</change>
<explanation>You should try to solve this problem yourself before reviewing this worked example.  The problem is shown on the next step - or look at the document on the Moodle site.

When you do decide to look through this worked example, be sure to read what's written down here for each step - the wisdom, such as it is, is down here!  It is this way of thinking that you should be learning to adopt...

Make sure this bottom pane is large enough to see all the text - or you can use the scroll bar on the right if needed (but take care not to miss text that is off the bottom of the window.)

Also, ANSWER EACH QUESTION POSED IN A STEP, IN YOUR HEAD OR ON PAPER, BEFORE MOVING ON TO THE NEXT STEP.  This will radically improve your learning.

So, remember the steps we disussed in the last lecture for solving these exam style problems:

1.  Read the question very carefully, highlighting or noting down anything that stands out.
2.  Look at any sample input and output, and make sure you understand how the output was derived from the input.
3.  Develop a simple or high-level set of steps that will solve the problem - a top-level plan.
</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>passwordCheckerProblem</docname>
<fragname id="ef4f4a13-dec3-4405-9505-f17a94ee246e">    aAaAaA          False;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerProblem</docname>
<fragname id="80536748-f4c9-49d2-bbc1-8ace568778bb">    aaa4aaa         False;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>passwordCheckerProblem</docname>
<fragname id="4dda133e-365e-42c3-912e-9aaefc986308">    aA4bc           False;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>passwordCheckerProblem</docname>
<fragname id="64c810fb-de7f-4249-80af-84d2db905cf2">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>passwordCheckerProblem</docname>
<fragname id="8b1b8242-1c34-47f1-81d5-4a490adbd909">The following are some sample passwords and the expected output from the checker function:;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>passwordCheckerProblem</docname>
<fragname id="e314aecb-6250-41cf-82de-dfeb6715277d">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>passwordCheckerProblem</docname>
<fragname id="483fc110-6b31-46f5-97de-7679b124bc2c">    - Must contain at least one digit, one lower case letter and one upper case letter;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>passwordCheckerProblem</docname>
<fragname id="2ec0e98e-3205-4268-a03a-627faa1b1a3d">    a4Abcd          True;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>passwordCheckerProblem</docname>
<fragname id="e5d838ae-e262-4d7e-bc64-3ffe6f6b3cf5">    - Must have at least 6 characters;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>passwordCheckerProblem</docname>
<fragname id="eb4dd807-96e7-438f-aa22-61ec7b00c86b">;</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>passwordCheckerProblem</docname>
<fragname id="b575be7a-9897-4fcf-84cb-f46f85541929">.  The rules for a valid password are as follows:;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>passwordCheckerProblem</docname>
<fragname id="4212c9d4-83b0-41cc-b391-84620897ddbb">return True or False depending on whether the password is well-formed or not, respectively</fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>passwordCheckerProblem</docname>
<fragname id="08ea462d-677b-457d-bdc7-389b55dac287">, and </fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>passwordCheckerProblem</docname>
<fragname id="dd97e3d5-bd80-456f-85c4-390807d776c0">take as parameter the password as a string</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>passwordCheckerProblem</docname>
<fragname id="3bbcb38e-51c7-4a24-bb7c-2745869c29a8">to check whether a password conforms to a set of rules ? as might be used when you register with a website.  The function should </fragname>
<operation>Insert</operation>
</change>
<change num = "16">
<docname>passwordCheckerProblem</docname>
<fragname id="a1af0502-fe09-4477-b1d6-f68a39549090">Write a function </fragname>
<operation>Insert</operation>
</change>
<change num = "17">
<docname>passwordCheckerProblem</docname>
<fragname id="df8d741e-0836-4207-b61d-db70af613f4d">Be sure to read what is in the bottom pane of the window on every step.;</fragname>
<operation>Delete</operation>
</change>
<explanation>So - here is the problem, as you might have in an exam.

Read the question carefully.  What to highlight...?
</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>passwordCheckerProblem</docname>
<fragname id="a1af0502-fe09-4477-b1d6-f68a39549090">Write a function </fragname>
<operation>Highlight</operation>
</change>
<explanation>We need a function - by comparison with a whole program.  We need just a function.

Anything else?</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>passwordCheckerProblem</docname>
<fragname id="dd97e3d5-bd80-456f-85c4-390807d776c0">take as parameter the password as a string</fragname>
<operation>Highlight</operation>
</change>
<explanation>- it takes a parameter
And...?
</explanation>
</step>
<step num = "5">
<change num = "1">
<docname>passwordCheckerProblem</docname>
<fragname id="4212c9d4-83b0-41cc-b391-84620897ddbb">return True or False depending on whether the password is well-formed or not, respectively</fragname>
<operation>Highlight</operation>
</change>
<explanation>- it returns a value - True or False</explanation>
</step>
<step num = "6">
<explanation>The True or False depends on some rules.  Take care on your intuition - what precisely are the rules, rather than what you expect them to be from your everyday experience of password rules?  In this case, upper and lowercase and digits are expected, but it says nothing about non-alphanumeric characters, which are often part of typical password rules.

What are the rules, exactly?
</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>passwordCheckerProblem</docname>
<fragname id="e5d838ae-e262-4d7e-bc64-3ffe6f6b3cf5">    - Must have at least 6 characters;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>passwordCheckerProblem</docname>
<fragname id="483fc110-6b31-46f5-97de-7679b124bc2c">    - Must contain at least one digit, one lower case letter and one upper case letter;</fragname>
<operation>Highlight</operation>
</change>
<explanation>Ok...

1.  Must be at least 6 characters long
2.  Must have at least one digit
3.  Must have at least one lowercase letter
4.  Must have at least one uppercase letter
</explanation>
</step>
<step num = "8">
<change num = "1">
<docname>passwordCheckerProblem</docname>
<fragname id="ef4f4a13-dec3-4405-9505-f17a94ee246e">    aAaAaA          False;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>passwordCheckerProblem</docname>
<fragname id="80536748-f4c9-49d2-bbc1-8ace568778bb">    aaa4aaa         False;</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>passwordCheckerProblem</docname>
<fragname id="2ec0e98e-3205-4268-a03a-627faa1b1a3d">    a4Abcd          True;</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>passwordCheckerProblem</docname>
<fragname id="4dda133e-365e-42c3-912e-9aaefc986308">    aA4bc           False;</fragname>
<operation>Highlight</operation>
</change>
<change num = "5">
<docname>passwordCheckerProblem</docname>
<fragname id="483fc110-6b31-46f5-97de-7679b124bc2c">    - Must contain at least one digit, one lower case letter and one upper case letter;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>passwordCheckerProblem</docname>
<fragname id="e5d838ae-e262-4d7e-bc64-3ffe6f6b3cf5">    - Must have at least 6 characters;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "7">
<docname>passwordCheckerProblem</docname>
<fragname id="4212c9d4-83b0-41cc-b391-84620897ddbb">return True or False depending on whether the password is well-formed or not, respectively</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "8">
<docname>passwordCheckerProblem</docname>
<fragname id="a1af0502-fe09-4477-b1d6-f68a39549090">Write a function </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "9">
<docname>passwordCheckerProblem</docname>
<fragname id="dd97e3d5-bd80-456f-85c4-390807d776c0">take as parameter the password as a string</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Ok, so we've got the basic idea now:

- a function, taking a password as a string, and processing the string according to a set of rules to return either True or False.

Let's consider the processing bit thoroughly.

First, as indicated earlier, check the sample input and output, ensuring you know how the latter was derived from the former.  In the case of a function, the input is argument values supplied on a call to the function, and the output is the value returned by the function, if any.  In this case:

- The first sample password results in False being returned because although it has digits, upper and lower case, it is not long enough.
- The second one is long enough (just), and has an upper case letter, lower case letters and a digit, and so is the result is True, as those are all the requirements.
- The third is False as it has no upper case letter.
- The fourth is also False as it has no digit.
</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>passwordCheckerProblem</docname>
<fragname id="4dda133e-365e-42c3-912e-9aaefc986308">    aA4bc           False;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>passwordCheckerProblem</docname>
<fragname id="2ec0e98e-3205-4268-a03a-627faa1b1a3d">    a4Abcd          True;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>passwordCheckerProblem</docname>
<fragname id="80536748-f4c9-49d2-bbc1-8ace568778bb">    aaa4aaa         False;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>passwordCheckerProblem</docname>
<fragname id="ef4f4a13-dec3-4405-9505-f17a94ee246e">    aAaAaA          False;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Brainstorming.  Do we know how to write code to determine each of the following?  Have we done something a bit like each of these before?

- Is the password the right length?
- Does it contain at least one capital letter?
- Does it contain at least one small letter?
- Does it contain at least one digit?

What is your answer to each of these ? how would we do it?
</explanation>
</step>
<step num = "10">
<explanation>Is the password the right length?  

We have done stuff like this before:  We can find the length of a string using the len function, and then use a comparison operator (e.g. &gt; &lt; etc.) to test the length.</explanation>
</step>
<step num = "11">
<explanation>We can scan over (or traverse) the characters in a string - with a for loop.  Then we can test each character as required, to see if it's upper case, lower case or a digit.  

We can use **one-way flag** variables here.  Can you remember what these are?  How would we use them here?</explanation>
</step>
<step num = "12">
<explanation>&quot;One-way flag&quot; is a way of using a variable - a variable role.  

We use a one-way flag when we are looking for a particular condition through repeated testing.  We start off by assuming the condition is not met, e.g. is False, and create a variable with False as the initial value; we then enter a loop that does a test for the condition each time around the loop.  If the condition is found to be true on any one time around the loop, the variable is set to True.  The way the code is written means that it can never be set back to False - a one-way flag.

So - here - before we start checking the password string, we assume it contains no capital letters, and set a one-way flag variable (we could call it &quot;seenCapital&quot;) to False, to indicate we haven't seen one yet.
If we ever then see a capital letter, we set the flag variable to True.  Whatever is in seenCapital at the end of checking the password characters represents whether the password contains a capital letter or not.

Can you see how to check for lowercase letters and digits now?
</explanation>
</step>
<step num = "13">
<explanation>You just use the same technique for those two as you did for the capital letter.  Easy.

So, you can test for all of these conditions - and once you have scanned over the whole password, you should have three Boolean values for upper and lower case and digits, and also another to indicate whether the length is ok, True or False for each of the conditions, so you simply need to combine them.
</explanation>
</step>
<step num = "14">
<explanation>So, to recap, we know we need a function returning a Boolean value, we have spent some time reflecting on whether we know how to take the password value and test it to see if we should return True or False, all before writing any code.  

It is all similar, though not identical, to things we have seen before.  Try to break down and remember all the little pieces you have used before - this should help you to match up a new problem to what you know how to do already.

Some folk are a bit confused by functions in Python.  But they are really no different from methods/functions in Alice.  There, you chose a name, you added parameters (name and type) if necessary, and if writing an Alice function, you specified a return type and then value.  Python is just the same - you write down a name, and you give parameter names (types aren't needed in Python), and you include a 'return' line in the function body if you want to return a value.

Let us code this up now...
</explanation>
</step>
<step num = "15">
<explanation>Do we need to import any modules?</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="10bedb8f-ed4b-4beb-a0d0-575ca0913e7f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="c9c60dc4-6b83-4169-ba05-96e0cb40f019">from string import *;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="4bd30e2f-632e-4f28-b0a8-400a132637a7">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>passwordCheckerCode</docname>
<fragname id="54ad033b-f258-44de-a0bf-a3dc0e0946c9"># Quintin;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>passwordCheckerCode</docname>
<fragname id="d54ce2ac-1147-41e6-806d-00a0a8207fe0">;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>passwordCheckerCode</docname>
<fragname id="db82dea9-c878-47e5-b021-95844a059365"># a digit, a lowercase letter and an uppercase letter.;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>passwordCheckerCode</docname>
<fragname id="c90c1f82-72a3-4057-ae96-47c4fd291c73"># contains at least 6 characters with at least one of each of;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>passwordCheckerCode</docname>
<fragname id="fa744140-0cc9-4a16-82d8-4b687ddaad31"># Function to check if a password is well-formed, that is;</fragname>
<operation>Insert</operation>
</change>
<explanation>Yes, the string module, so that we can access the uppercase, lowercase and digits values in our tests.

Add a comment explaining the program too.

How does the function header look?
</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="9d55155c-7a13-4dfd-aee0-809bd79abda2">    return ???;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="1f95ea6c-3f8a-44ae-a9c1-a3c605f2ca40">def checkPassword( password ):;</fragname>
<operation>Insert</operation>
</change>
<explanation>Easy.  Use a sensible name for the function, and meaningful names for the parameters.

Worth adding in the return statement now, just so you don't forget it.  If you're writing on paper, then obviously do this some way down the page!</explanation>
</step>
<step num = "18">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="a969e7ab-669c-4104-8087-2d471d66b571">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="f3b2bfab-23c6-445c-ab7f-3ea64bddce87">    # Combine our analysis into a single boolean value and return it;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="0c798b06-9aec-45f4-b404-8865bd7ddc58">    # Check each character in turn in the password;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>passwordCheckerCode</docname>
<fragname id="7d90fa78-0e7a-4141-817b-dfbd955c7356">    ;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>passwordCheckerCode</docname>
<fragname id="034abfa6-cbf0-4608-84c1-82c66a482c81">    # Check if the length is ok;</fragname>
<operation>Insert</operation>
</change>
<explanation>Now, put in some comments explaining the rough structure of what we are going to do:</explanation>
</step>
<step num = "19">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="1273e89b-4d13-46d9-8385-7b29d88639f0">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="10bedb8f-ed4b-4beb-a0d0-575ca0913e7f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="7f3a1d9f-743e-4b27-84db-66f7884deb7d">minLength = 6;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>passwordCheckerCode</docname>
<fragname id="34f13d9e-2d18-4132-a9d3-ab9d9e4239d6">        lengthOK = False;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>passwordCheckerCode</docname>
<fragname id="757a02ad-ad3c-4d02-9c6e-770ab3eb8eb6">    else:;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>passwordCheckerCode</docname>
<fragname id="4656298b-0b54-48a4-8427-e4fc5be0747a">        lengthOK = True;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>passwordCheckerCode</docname>
<fragname id="0caf0abd-790d-4528-a7f0-70b3698e8789">    if len( password ) &gt;= minLength:;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here is one way you might consider testing and remembering whether the length of the password is ok.  Does it look ok to you?

Note we've used a &quot;minLength&quot; variable to represent the minimum allowable length of a password.  While we know that the value for this is 6, and we could just write 6 in the test, it is better to give such so-called &quot;naked&quot; values a name - it helps the readability of the code.  If the name does not fully describe the purpose of the value, then a comment could be added on the line the name is created.</explanation>
</step>
<step num = "20">
<explanation>It is ok - but it is not the best way.  It is hard to explain why, so you may need to read this bit a few times.

The test in this if statement - len(password) &gt;= minLength - must evaluate to one of the values True or False.  The if statement says that if it evaluates to True, then the variable lengthOK should be set to True.  The if statement also says that if the test evaluates to False, then the same variable lengthOK should be set to False.

Note that again - if the test evaluates to True, the variable is set to True; if the test evaluates to False, the variable is set to False.

Here is the realization: we can simply set the variable to be the result of evaluating the test.  See how on the next step.
</explanation>
</step>
<step num = "21">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="9eabf1fe-2980-4285-8f9f-07959c186278"># Test on whether length is ok;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="911453ff-d5b5-4794-b5a0-a563cd4caefb">    lengthOK = len( password) &gt;= minLength   </fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="34f13d9e-2d18-4132-a9d3-ab9d9e4239d6">        lengthOK = False;</fragname>
<operation>Delete</operation>
</change>
<change num = "4">
<docname>passwordCheckerCode</docname>
<fragname id="757a02ad-ad3c-4d02-9c6e-770ab3eb8eb6">    else:;</fragname>
<operation>Delete</operation>
</change>
<change num = "5">
<docname>passwordCheckerCode</docname>
<fragname id="4656298b-0b54-48a4-8427-e4fc5be0747a">        lengthOK = True;</fragname>
<operation>Delete</operation>
</change>
<change num = "6">
<docname>passwordCheckerCode</docname>
<fragname id="034abfa6-cbf0-4608-84c1-82c66a482c81">    # Check if the length is ok;</fragname>
<operation>Delete</operation>
</change>
<change num = "7">
<docname>passwordCheckerCode</docname>
<fragname id="0caf0abd-790d-4528-a7f0-70b3698e8789">    if len( password ) &gt;= minLength:;</fragname>
<operation>Delete</operation>
</change>
<explanation>It is much neater this way - but may take a bit of getting used to.  Flick back and forward if you are not sure, looking at the old version and this one, until you can convince yourself that they are the same.</explanation>
</step>
<step num = "22">
<explanation>Now to check for the three other conditions.  As we discussed earlier, these all require looping over each character in the password, performing the necessary tests and recording the result if necessary using one-way flag variables.

What would be good names for the three variables?
</explanation>
</step>
<step num = "23">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="b0d684ac-514f-4a0d-981c-e28577fa2c4c">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="fd0ccb1e-fa4d-4be3-90d8-72d5ede408a4"># ... same for digits;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="94f1a8e1-4503-416a-8cc5-3299bfa3fd7b">    hasDigit = False          </fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>passwordCheckerCode</docname>
<fragname id="6f409e4f-0a74-42e3-a7f7-dcf81041e981"># ... same for uppercase letters;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>passwordCheckerCode</docname>
<fragname id="4cf27d4b-a22e-4508-9598-0953a3c22f9e">    hasUpperLetter = False    </fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>passwordCheckerCode</docname>
<fragname id="cdaa73e0-79f6-4177-aaa0-8ef72b131f7f"># Initially, assume no lowercase letters;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>passwordCheckerCode</docname>
<fragname id="5d59fcde-09aa-4f87-beeb-013d0e1f4a13">    hasLowerLetter = False    </fragname>
<operation>Insert</operation>
</change>
<explanation>Here they are.  Each name is a bit like a statement.  hasLowerLetter is shorthand for recording &quot;I have seen a lower case letter&quot;.  Initially, of course, this is set to False.

What should the loop header look like?
</explanation>
</step>
<step num = "24">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="581553cf-31cc-45d2-b0df-e9051757fd2f">    for char in password:;</fragname>
<operation>Insert</operation>
</change>
<explanation>This is a simple for loop over the items in the string.  We do not need to know about any indices, so we can use this simple form.

And what should the test look like for a lower case letter, and what should we do if we find one?
</explanation>
</step>
<step num = "25">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="4b274763-e1e2-4f83-939c-d0fc8d2e8268">            hasLowerLetter = True;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="d3e55f5a-8822-4b5b-9e7e-ea7c5f2970c3">        if char in lowercase:;</fragname>
<operation>Insert</operation>
</change>
<explanation>We can use the lowercase value from the string module in our test, to make it simpler.  And if it turns out that the password letter we are currently looking at in the loop is a lower case letter, then we set the corresponding one-way flag to True.

Be sure you understand how the whole check for a lower case letter works - how the one-way flag works.

How would you now extend this for upper case and digits?
</explanation>
</step>
<step num = "26">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="f1359f08-4c1c-4768-83b7-8b28cda3de18">            hasDigit = True;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="3789bdcd-139d-45fa-bf57-147ebf6f1a5e">        if char in digits:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="2c6294f6-b87c-441e-bc14-ebf7ece21e79">            hasUpperLetter = True;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>passwordCheckerCode</docname>
<fragname id="f164661c-40b8-43d4-9ad6-7900006a8309">        if char in uppercase:;</fragname>
<operation>Insert</operation>
</change>
<explanation>This is perhaps the easiest / most obvious way.  Two repeats of the same structure.  And it will work fine.

We did discuss this in the last lecture, though.  There is a slightly better way of representing this, that more closely matches the problem.  Can you remember from the lecture how you could structure this differently?
</explanation>
</step>
<step num = "27">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="3789bdcd-139d-45fa-bf57-147ebf6f1a5e">        if char in digits:;</fragname>
<operation>Delete</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="f164661c-40b8-43d4-9ad6-7900006a8309">        if char in uppercase:;</fragname>
<operation>Delete</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="74f6faac-cf39-430a-9b96-57f4547ba5db">        elif char in digits:;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>passwordCheckerCode</docname>
<fragname id="b4b44464-56c7-4fa9-b366-bd42b0fba05b">        elif char in uppercase:;</fragname>
<operation>Insert</operation>
</change>
<explanation>See how it has been rewritten?  Flick back and forward to see the difference.

We can rewrite it this way because the value in the char variable can at most only satisfy ONE of the three tests, if any at all.  A single character cannot, for example, be both a lower case and an upper case letter, or any kind of letter and also a digit.  Hence, as soon as we discover that a character has satisfied one of the conditions, we can set the corresponding one-way flag and then immediately start on the next character in the password.
</explanation>
</step>
<step num = "28">
<explanation>Now to combine these.  Under what overall condition is the password we are checking a good one?</explanation>
</step>
<step num = "29">
<explanation>It is a good password only when ALL of the conditions are True.  How should we combine our four Boolean variables then?</explanation>
</step>
<step num = "30">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="8fef0dae-fc6b-4ff4-8002-b72fabccbf88">    return result;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="9d55155c-7a13-4dfd-aee0-809bd79abda2">    return ???;</fragname>
<operation>Delete</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="2d68099c-a92e-4728-99ec-bab0d50f4c02">    result = lengthOK and hasLowerLetter and hasUpperLetter and hasDigit;</fragname>
<operation>Insert</operation>
</change>
<explanation>You may have considered writing something like:

     if lengthOK and hasLowerLetter and hasUpperLetter and hasDigit:
          return True
     else:
          return False

Again, this would work - but just as in the length test above, using the same logic, it can be neater, as shown here.

But the result variable is a little bit superfluous, and I'd prefer the next step's rewrite...</explanation>
</step>
<step num = "31">
<change num = "1">
<docname>passwordCheckerCode</docname>
<fragname id="3c854404-dfdc-462a-8d79-b2fa2da7b10d">    return lengthOK and hasLowerLetter and hasUpperLetter and hasDigit;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>passwordCheckerCode</docname>
<fragname id="2d68099c-a92e-4728-99ec-bab0d50f4c02">    result = lengthOK and hasLowerLetter and hasUpperLetter and hasDigit;</fragname>
<operation>Delete</operation>
</change>
<change num = "3">
<docname>passwordCheckerCode</docname>
<fragname id="8fef0dae-fc6b-4ff4-8002-b72fabccbf88">    return result;</fragname>
<operation>Delete</operation>
</change>
<explanation>And so, we are done.  Check over all the steps and made sure the reasoning all makes sense to you.  Wait a day and then solve it yourself, to see how much you have remembered.</explanation>
</step>
</process>
<process name ="JustAMinuteExample" app = "JustAMinute" processID ="d6f78a08-f184-4ae4-be82-9b758f6c29f6">
<step num = "1">
<explanation>Solve this problem as far as you can first, before making use of this worked example.


Remember the approach to this kind of problem as before:
1.  Read the question very carefully, highlighting or noting down anything that stands out.
2.  Look at any sample input and output, and make sure you understand how the output was derived from the input.
3.  Develop a simple or high-level set of steps that will solve the problem - a top-level plan.
</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>JustAMinuteProblem</docname>
<operation>Show all</operation>
</change>
<explanation>Reading the question thoroughly, what should you pay attention to?  

Note in your head those parts, before going on to the next step.</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>JustAMinuteProblem</docname>
<fragname id="a91ba6ec-cdc4-45b7-ab92-2984163d825b">write a complete program </fragname>
<operation>Highlight</operation>
</change>
<explanation>This time, you are asked to write a complete program.

As quite often happens, even though there is a lot of text to give you context, the program is actually quite simple? what are you asked to do?
</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>JustAMinuteProblem</docname>
<fragname id="92918989-f06b-459a-8c77-d09d047ec9fe">writing out any words that appear more than once in the text.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>JustAMinuteProblem</docname>
<fragname id="ba8449d6-081f-4bc6-80f1-61d0c789287d">reads in a single line of text from the user</fragname>
<operation>Highlight</operation>
</change>
<explanation>That's it - read in a single line of text, and find and write out all the words that appear more than once in the text.
Is there anything else important?
</explanation>
</step>
<step num = "5">
<change num = "1">
<docname>JustAMinuteProblem</docname>
<fragname id="957ba26f-60b0-4f54-bc64-8cc892656b1a">Note that the order in which the words appear in the output is not important and that upper and lower case are treated the same - see how 'The' and 'the' are treated the same in the example above.;</fragname>
<operation>Highlight</operation>
</change>
<explanation>The final sentence should be noted.  The words in the output may appear in any order.  And also, the difference between upper and lower case should be ignored.</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>JustAMinuteProblem</docname>
<fragname id="e8846dc1-ff20-4562-a5ec-953bb8adef78">the 7;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>JustAMinuteProblem</docname>
<fragname id="3db23e68-d9c4-4eee-89a0-34329090d426">of 5;</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>JustAMinuteProblem</docname>
<fragname id="64777699-1e30-4c7a-88c8-91cd07a4aac0">march 3;</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>JustAMinuteProblem</docname>
<fragname id="0b91ad00-3864-43fc-b871-ee2cea6a7b6f">ides 2;</fragname>
<operation>Highlight</operation>
</change>
<change num = "5">
<docname>JustAMinuteProblem</docname>
<fragname id="9cdd113f-3fed-46f0-bafd-ffda5c6a85e1">as 2;</fragname>
<operation>Highlight</operation>
</change>
<change num = "6">
<docname>JustAMinuteProblem</docname>
<fragname id="7862fbc6-6a32-4fa3-b6e0-b79c63b52cd4">known 2;</fragname>
<operation>Highlight</operation>
</change>
<change num = "7">
<docname>JustAMinuteProblem</docname>
<fragname id="db1449fc-475c-4fbb-bf06-ac423816cc61">The Ides of March are well known historically as the date on which Julius Caesar was assassinated by Brutus and others.  To be precise, the day of the year in question is the 15th of March.  JC should have known better as Shakespeare?s soothsayer apparently warned him of the danger, saying Beware the Ides of March.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "8">
<docname>JustAMinuteProblem</docname>
<fragname id="92918989-f06b-459a-8c77-d09d047ec9fe">writing out any words that appear more than once in the text.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "9">
<docname>JustAMinuteProblem</docname>
<fragname id="ba8449d6-081f-4bc6-80f1-61d0c789287d">reads in a single line of text from the user</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "10">
<docname>JustAMinuteProblem</docname>
<fragname id="a91ba6ec-cdc4-45b7-ab92-2984163d825b">write a complete program </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "11">
<docname>JustAMinuteProblem</docname>
<fragname id="957ba26f-60b0-4f54-bc64-8cc892656b1a">Note that the order in which the words appear in the output is not important and that upper and lower case are treated the same - see how 'The' and 'the' are treated the same in the example above.;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>You can examine the sample input and output of the program to see all this in action.  The words appear in no particular order.  To get a count of 7 &quot;the&quot;s, you need to include the first one with the capital T.

Note also that punctuation is being ignored.  March appears with both a full stop and no full stop after it - all occurrences are counted in the total of 3.
</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>JustAMinuteProblem</docname>
<fragname id="db1449fc-475c-4fbb-bf06-ac423816cc61">The Ides of March are well known historically as the date on which Julius Caesar was assassinated by Brutus and others.  To be precise, the day of the year in question is the 15th of March.  JC should have known better as Shakespeare?s soothsayer apparently warned him of the danger, saying Beware the Ides of March.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>JustAMinuteProblem</docname>
<fragname id="e8846dc1-ff20-4562-a5ec-953bb8adef78">the 7;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>JustAMinuteProblem</docname>
<fragname id="3db23e68-d9c4-4eee-89a0-34329090d426">of 5;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>JustAMinuteProblem</docname>
<fragname id="64777699-1e30-4c7a-88c8-91cd07a4aac0">march 3;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>JustAMinuteProblem</docname>
<fragname id="0b91ad00-3864-43fc-b871-ee2cea6a7b6f">ides 2;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>JustAMinuteProblem</docname>
<fragname id="9cdd113f-3fed-46f0-bafd-ffda5c6a85e1">as 2;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "7">
<docname>JustAMinuteProblem</docname>
<fragname id="7862fbc6-6a32-4fa3-b6e0-b79c63b52cd4">known 2;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Take a moment now to jot down the actions that you will need to perform in order to produce this list.

As you do so, consider whether any of this is like other problems you've solved.
</explanation>
</step>
<step num = "8">
<explanation>Well, you are working with words - that is like the indexer in the lab exam - splitting the text into a list of words will be useful.  You are to ignore upper and lower case - that is also like both the lab exam and the palindromes exercise, where you used the lower or upper function to convert the text into all the same case.  Punctuation is being ignored too - you could just remove it.

You are counting occurrences of words.  This is similar, but not identical, to creating the index from the lab exam.  A good solution there was to use a dictionary.

So to the program...
</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="36248888-6653-4836-8f2b-16a7603738c8">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="ebd507fc-d355-4da4-9c5d-d75008e72793"># Quintin;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>JustAMinuteCode</docname>
<fragname id="6699d052-d528-400b-8659-a2d63f3267d8">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>JustAMinuteCode</docname>
<fragname id="aa421fb2-d55a-438e-a97f-b9c1282b063c"># Checks for repeated words in a sentence;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>JustAMinuteCode</docname>
<fragname id="bc4e37c7-e72e-4054-90de-eb8d7ca7d664"># Checker suitable for a game such as Just a Minute;</fragname>
<operation>Insert</operation>
</change>
<explanation>Put in a comment at the start.

Are we going to need to import anything from a module?
</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="967be561-82c5-4e7e-b764-3feebc7a4ed2">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="eeacb02d-45e3-4104-a58d-c90475728255">from string import *;</fragname>
<operation>Insert</operation>
</change>
<explanation>Yes, again, we need to import the string module.</explanation>
</step>
<step num = "11">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="1538e203-dfe1-46fc-a660-fa478cdcf37c"># Now print out the results;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="49ee0209-7e1f-440f-8a31-842883a6a341">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>JustAMinuteCode</docname>
<fragname id="50413c99-8ead-4c5a-b527-00883e483044"># Scan over the word list, keeping a count of each word seen;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>JustAMinuteCode</docname>
<fragname id="6de81795-5d38-4346-a0d1-1f5a563e9baa">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>JustAMinuteCode</docname>
<fragname id="db1883eb-3acd-4b07-b957-018249d0deca"># Turn the raw text into a list of words;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>JustAMinuteCode</docname>
<fragname id="7027d6ca-4ab3-473c-bf17-b7259e98b4c8">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>JustAMinuteCode</docname>
<fragname id="84129754-ae3c-4563-9ab0-367d1fe6b3f4">text = raw_input( &quot;Please enter the text to be checked: &quot; );</fragname>
<operation>Insert</operation>
</change>
<explanation>As before, put in the major steps as comments.  If writing on paper, you can still do this, to show you have in your mind a broad structure for your solution -  just make sure you leave a good chunk of space between each comment for the code!

See how this particular problem is a sequence - read in the text, process it to get a list of words, process the words to get counts, and then output the results.

Now.  What steps do you need to follow to get a clean list of words?
</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="009052d4-ce74-451b-8fff-727ff7140784">words = split( textNoPunctuation );</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="ba2c8f3c-6e7e-4824-975a-c7e75df54c54">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>JustAMinuteCode</docname>
<fragname id="ce4e1218-d095-400d-9457-2d95662f50af">        textNoPunctuation = textNoPunctuation + char;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>JustAMinuteCode</docname>
<fragname id="91b0eed7-9b46-4850-b46c-239d9408354b">    if char not in punctuation:;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>JustAMinuteCode</docname>
<fragname id="33f26e8c-6519-4019-98bb-83dc62daa6b5">for char in text:;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>JustAMinuteCode</docname>
<fragname id="d48a8cd9-3136-4cee-b8a0-603654009834">textNoPunctuation = &quot;&quot;;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>JustAMinuteCode</docname>
<fragname id="80a39fb8-9f65-4ad6-a4b1-2af8e722e0ed">text = lower( text );</fragname>
<operation>Insert</operation>
</change>
<explanation>Ok, you've done it all before, you could do it with your eyes shut.  Yes, convert to lower case, remove the punctuation, and split the resulting string into a list of words.

What about the word counting?
</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="82d5bebf-a6ab-485a-8497-baf412fb083c">        wordCounts[ word ] = wordCounts[ word ] + 1;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="52989258-b1b3-493d-a614-e4a605ed7288">for word in words:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>JustAMinuteCode</docname>
<fragname id="a126dd90-d9d8-49ae-802a-eabfcfe79294">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>JustAMinuteCode</docname>
<fragname id="85c5eb5f-1a23-4b0c-b251-5fe20d232516">          # Use a dictionary to keep the word counts;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>JustAMinuteCode</docname>
<fragname id="aba86bd6-dcfa-4dcc-befe-5ca643d87913">wordCounts = {}</fragname>
<operation>Insert</operation>
</change>
<explanation>So we are going to use a dictionary.  Each word that we find in the text will get an entry in the dictionary, along with a count of how many times we have seen that word.

Would this code do?  Check it out carefully?
</explanation>
</step>
<step num = "14">
<explanation>It is close - but what would happen if we had not seen a word before?</explanation>
</step>
<step num = "15">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="82d5bebf-a6ab-485a-8497-baf412fb083c">        wordCounts[ word ] = wordCounts[ word ] + 1;</fragname>
<operation>Highlight</operation>
</change>
<explanation>Yes indeed - we would get an error - because evaluating the expression on the right hand side of the = would fail, as there would be no entry yet for the word we are currently working with.

How should we extend this then?
</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="82d5bebf-a6ab-485a-8497-baf412fb083c">        wordCounts[ word ] = wordCounts[ word ] + 1;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="d5b3629d-a7fe-45e2-bb76-e0dd6e713bc7">    else:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>JustAMinuteCode</docname>
<fragname id="1158f88e-3568-4106-90cd-7ea80d8485dc">    if word in wordCounts:;</fragname>
<operation>Insert</operation>
</change>
<explanation>We just need to allow for the case of not having seen the word yet - we need to update the dictionary in different ways depending on whether we have or have not seen the word before.  And, if we have seen the word before, then there will be an entry already in the dictionary ? hence the test shown.

What should go in the else branch?
</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="0cd4ab6e-9ae6-4042-82d1-ff4f850472b4">    # Create a new entry for this word, not seen before;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="bc41cc6b-7836-4df6-8228-aef928850e7b">        wordCounts[ word ] = 1</fragname>
<operation>Insert</operation>
</change>
<explanation>That's it - just creating a new entry for this word.</explanation>
</step>
<step num = "18">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="d34dd60f-b655-41ce-9f1e-e0e060f74646">    print word, wordCounts[ word ];</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="6eb19e36-a30f-4acb-8f3b-5e67f79f5290">for word in wordCounts:;</fragname>
<operation>Insert</operation>
</change>
<explanation>Now we just need to write out the words.

This code should do it.  Check it over to make sure it makes sense.
</explanation>
</step>
<step num = "19">
<explanation>Hang on - what were we asked to write out?  This writes out all the words - is that what we were asked for?

Easy mistake to make here - just not quite reading the question closely enough, or forgetting at the last what was asked.  We should only write out words that appear more than once.

What should we add or change then?
</explanation>
</step>
<step num = "20">
<change num = "1">
<docname>JustAMinuteCode</docname>
<fragname id="547a3d8f-7017-4c29-8dfd-cb611b6646c7">        print word, count;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>JustAMinuteCode</docname>
<fragname id="fdc29718-d8f4-4687-be55-cdf39da3864d">                # Only write out words seen more than once;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>JustAMinuteCode</docname>
<fragname id="191aa7ce-ae2e-4afb-bf0e-f4885d745670">    if count &gt; 1:</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>JustAMinuteCode</docname>
<fragname id="353a564c-c0ba-4e58-9338-f694b684ce3b">    count = wordCounts[ word ];</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>JustAMinuteCode</docname>
<fragname id="d34dd60f-b655-41ce-9f1e-e0e060f74646">    print word, wordCounts[ word ];</fragname>
<operation>Delete</operation>
</change>
<explanation>That is better.

Again, wait a while and then solve this problem from scratch, without the help of this worked example.
</explanation>
</step>
</process>
<process name ="FindErrorsExample" app = "FindErrors" processID ="8f5938db-cc89-43ea-a306-72701717b391">
<step num = "1">
<explanation>In this example, we are going to review a typical style of programming exam question.  this is the &quot;Find errors in this code&quot; question.

You are given a small fragment of code that is designed to solve a particular problem.  A rough explanation of how the code is intended to solve the problem is usually given, or else you are expected from earlier work to know the algorithm.  You are told that there are a certain number of errors in the code, say 3 or 4, and you have to find them, explain why there is a problem, and how to fix the problem.</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>FindErrorsProblem</docname>
<operation>Show all</operation>
</change>
<explanation>Here is the sample question.

Before going any further, have a go at solving the problem yourself now.  Don't go on until you have spent a few minutes on it at least.</explanation>
</step>
<step num = "3">
<explanation>How did you get on?  What strategies were you trying?  Did you find four errors?

Even if you found four errors, read on.  We'll explore some strategies in the next few steps - these may match what you were doing, or you may realise there are some you didn't think of...</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<operation>Show all</operation>
</change>
<explanation>Here are the strategies that we think are worth trying.

Before we work through each one, take some time now to do so yourself without any further explanation.  Take your time. Do this now, before reading on. 

Do they help?  Whether they do or not, read on to see one way of applying them...</explanation>
</step>
<step num = "5">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<fragname id="524a54fb-3fd1-4ff4-81a0-574a6c01b97f">1.  Do your best to understand how the code is meant to be working.  This is usually explained to a greater or lesser extent in the problem itself.  As you do this, you may well encounter problems.  If not, then look at the rest of the points.;</fragname>
<operation>Highlight</operation>
</change>
<explanation>This is the most general strategy.  Basically, having read the problem description, you read through the code to see if it matches either the method described for solving the problem, or your own intuition on solving it.

In this example, you have all written code to do this, so you have a good understanding of how it should work.  Even if the solution here isn't using the same mechanism you did in the lab exam, you are likely to be familiar enough with the problem to get an idea of how it is designed to work (even though it has errors).

If you did find errors this way, good.  If you didn't, then each of the following strategies gives you a clearer focus on a particular possible source of errors to aim for.</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<fragname id="c9fe05c8-d9b8-47f0-b4ab-595b61fb367c">2.  Are all the variables initialised properly?  That is, is any variable used BEFORE it has first been given a value?;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsStrategies</docname>
<fragname id="524a54fb-3fd1-4ff4-81a0-574a6c01b97f">1.  Do your best to understand how the code is meant to be working.  This is usually explained to a greater or lesser extent in the problem itself.  As you do this, you may well encounter problems.  If not, then look at the rest of the points.;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>This is a common source of errors.  We can look at each variable in turn and make sure it has been properly initialised - that is, given a first value...</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>FindErrorsProblem</docname>
<fragname id="3462831a-ce02-4d14-a408-6c5eab8e5d06">stop_word_list</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsProblem</docname>
<fragname id="05ffb0a2-109e-463c-9700-907bcdcaddcb">stop_word_list </fragname>
<operation>Highlight</operation>
</change>
<explanation>Let's start with stop_word_list.

It has been created and initialised at the start of the code, and crucially, before it can ever be accessed, since the only access is inside the function body itself.  So that's ok.</explanation>
</step>
<step num = "8">
<change num = "1">
<docname>FindErrorsProblem</docname>
<fragname id="284e9c8e-0ecd-4a90-868f-8498c756f919">old_words</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsProblem</docname>
<fragname id="cee2c68f-02d9-41a1-8e56-8e2b6bf85e3d">old_words</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>FindErrorsProblem</docname>
<fragname id="05ffb0a2-109e-463c-9700-907bcdcaddcb">stop_word_list </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>FindErrorsProblem</docname>
<fragname id="3462831a-ce02-4d14-a408-6c5eab8e5d06">stop_word_list</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>old_words is a parameter.  A parameter is created and given a value at the start of a call of the function.  This means that any use of the parameter inside the function is guaranteed to be ok.  So old_words isn't a problem.</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>FindErrorsProblem</docname>
<fragname id="bf28b6a9-c4bd-428a-8c75-ac4bd418bce5">i</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsProblem</docname>
<fragname id="81baff36-9a12-44f1-8d8a-0925a0d7cff2">i</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>FindErrorsProblem</docname>
<fragname id="c948d703-f028-40a7-b107-8b78fd7f2dd1">i</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>FindErrorsProblem</docname>
<fragname id="cee2c68f-02d9-41a1-8e56-8e2b6bf85e3d">old_words</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>FindErrorsProblem</docname>
<fragname id="284e9c8e-0ecd-4a90-868f-8498c756f919">old_words</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>The variable i is known as a &quot;for loop variable&quot; and is created and assigned values by the for loop itself.  Any use of the variable inside the loop is going to be ok - so we don't need to worry about this one.</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>FindErrorsProblem</docname>
<fragname id="2194069b-1a6f-4e0d-adc8-2657e0edf58e">words</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsProblem</docname>
<fragname id="c9096dfd-9ad5-4e70-98a8-f1f82ee4bc99">words</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>FindErrorsProblem</docname>
<fragname id="47e3f720-176f-473c-8a3c-d2ee7f7bdb03">            words</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>FindErrorsProblem</docname>
<fragname id="c948d703-f028-40a7-b107-8b78fd7f2dd1">i</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>FindErrorsProblem</docname>
<fragname id="81baff36-9a12-44f1-8d8a-0925a0d7cff2">i</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>FindErrorsProblem</docname>
<fragname id="bf28b6a9-c4bd-428a-8c75-ac4bd418bce5">i</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Now what about words?  The first time, during execution, that this variable is accessed is on the right hand side of the assignment statement.  I know it's not written that way - the creation on the left hand side comes first - but during execution, Python will evaluate the right hand side first, before trying to store the resulting value into the words variable.  When Python tries to access the value in words, it will find that words hasn't yet been created.  So this is one of the errors.

How should we write about this error?  We've been asked to identify the error and to suggest a solution.  Try writing this down precisely before moving on to the next step.</explanation>
</step>
<step num = "11">
<change num = "1">
<docname>FindErrorsAnswers</docname>
<fragname id="bc18176c-cd07-4691-8215-a333149fe5de">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>FindErrorsAnswers</docname>
<fragname id="e1855524-6213-4c39-ad7c-ac2413e9e282">    words = [];</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>FindErrorsAnswers</docname>
<fragname id="458d5ef2-d634-4e2c-a0cc-8e7055a07d3d">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>FindErrorsAnswers</docname>
<fragname id="b91c1334-a102-4562-82b7-5633de9ab760">1.  The variable words is not initialised.  It is a gatherer variable, and should be initialised to the empty list.  To fix it, between line 2 and 3, at one indentation level in, add ;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>FindErrorsAnswers</docname>
<fragname id="3e757fa6-a75e-40b1-abee-6efc1fd43f3d">;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>FindErrorsAnswers</docname>
<fragname id="b24c5147-f718-4e94-b756-7bfcdc50d22f">The Errors;</fragname>
<operation>Insert</operation>
</change>
<explanation>This explanation shows that you fully understand the error in the context of the problem, and how to fix it.  Note how the line numbers contained in the comments have been used so that it is obvious exactly where you want to add in an extra line.  Note also that the indentation level is given - an important aspect in Python.

That's all the variables examined to ensure they've been created/initialised properly.  Let's move on to the next strategy.</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>FindErrorsProblem</docname>
<fragname id="284e9c8e-0ecd-4a90-868f-8498c756f919">old_words</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsProblem</docname>
<fragname id="d4623a4b-be82-47f2-a106-ce8498d2b8f6"> in </fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>FindErrorsProblem</docname>
<fragname id="c948d703-f028-40a7-b107-8b78fd7f2dd1">i</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>FindErrorsProblem</docname>
<fragname id="a5254f2e-edb7-4351-b168-6c14343e9b5e">    for </fragname>
<operation>Highlight</operation>
</change>
<change num = "5">
<docname>FindErrorsProblem</docname>
<fragname id="2194069b-1a6f-4e0d-adc8-2657e0edf58e">words</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>FindErrorsProblem</docname>
<fragname id="c9096dfd-9ad5-4e70-98a8-f1f82ee4bc99">words</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "7">
<docname>FindErrorsProblem</docname>
<fragname id="47e3f720-176f-473c-8a3c-d2ee7f7bdb03">            words</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "8">
<docname>FindErrorsStrategies</docname>
<fragname id="65f6ec75-2224-4cf2-955a-fddb927a1a5e">3.  In loops, check that the loop will &quot;go round&quot; the right number of times.  Take care to check on the initialisation, test for completion of the loop, and update, of any stepper/counter variable;</fragname>
<operation>Highlight</operation>
</change>
<change num = "9">
<docname>FindErrorsStrategies</docname>
<fragname id="c9fe05c8-d9b8-47f0-b4ab-595b61fb367c">2.  Are all the variables initialised properly?  That is, is any variable used BEFORE it has first been given a value?;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>In this example, we have just one loop, a for loop.  How many of the words in the list are we looking at?  How many of the words in the list **should** we be looking at?  

ALL of them - we need to check every one to see if it's in the stopword list.

And that is exactly what this loop is doing - traversing all the items in the list.

So, no problem here.</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<fragname id="65f6ec75-2224-4cf2-955a-fddb927a1a5e">3.  In loops, check that the loop will &quot;go round&quot; the right number of times.  Take care to check on the initialisation, test for completion of the loop, and update, of any stepper/counter variable;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>FindErrorsStrategies</docname>
<fragname id="aad5e936-76ad-45f1-9734-fdab176d156d">4.  Check tests in if statements and while loops.  Are you sure the test is the correct one?  Compound Boolean expressions, where you are using more than one ?and? or ?or? operator, can often be used incorrectly.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>FindErrorsProblem</docname>
<fragname id="3462831a-ce02-4d14-a408-6c5eab8e5d06">stop_word_list</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>FindErrorsProblem</docname>
<fragname id="0e1b4c1a-ac77-41c6-ba13-d9175fcc8c72"> in </fragname>
<operation>Highlight</operation>
</change>
<change num = "5">
<docname>FindErrorsProblem</docname>
<fragname id="4fb5fa51-bd75-4b77-ae71-81c1fbb84ed0">        if </fragname>
<operation>Highlight</operation>
</change>
<change num = "6">
<docname>FindErrorsProblem</docname>
<fragname id="81baff36-9a12-44f1-8d8a-0925a0d7cff2">i</fragname>
<operation>Highlight</operation>
</change>
<change num = "7">
<docname>FindErrorsProblem</docname>
<fragname id="284e9c8e-0ecd-4a90-868f-8498c756f919">old_words</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "8">
<docname>FindErrorsProblem</docname>
<fragname id="d4623a4b-be82-47f2-a106-ce8498d2b8f6"> in </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "9">
<docname>FindErrorsProblem</docname>
<fragname id="c948d703-f028-40a7-b107-8b78fd7f2dd1">i</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "10">
<docname>FindErrorsProblem</docname>
<fragname id="a5254f2e-edb7-4351-b168-6c14343e9b5e">    for </fragname>
<operation>Unhighlight</operation>
</change>
<explanation>This is related to the previous strategy - in that it is getting you to check on any test/condition very carefully.  If you are using while loops, you have a condition in there, and you should check it very carefully, to see if it is controlling the loop properly.

In this example, we don't have a while loop, but we do have an if statement with a condition in it.  Is this condition working as we would expect?  Look at it closely now, before moving on...</explanation>
</step>
<step num = "14">
<explanation>Not sure?  Well, the condition is testing to see if the current word we're looking at (held in the i variable) is in the stopword list.  If it is, we go ahead and add it to the words list - the list that we eventually return.

Is that ok?</explanation>
</step>
<step num = "15">
<explanation>No - of course it's not.  We only want to add one of the words to the list we return if the word is NOT in the stopword list.

So, in the next step, write down precisely how you would explain this error and how to solve it...</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<operation>Ask Answer</operation>
<question num = "16" content="As an exercise, type in how you would explain this error and how to solve it.  You can move this window around, and scroll the panes in the main widnow if you need to." type="DESCRIPTIVE">
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>FindErrorsAnswers</docname>
<fragname id="e7800769-fb10-46b7-b9c3-49c107b6accd">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>FindErrorsAnswers</docname>
<fragname id="9a05271d-e74e-4740-88ff-20b572581a25">    if i not in stop_word_list:;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>FindErrorsAnswers</docname>
<fragname id="ddc47a91-58b3-4246-b733-eb18f71c7167">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>FindErrorsAnswers</docname>
<fragname id="cb66ffea-f216-4899-ae82-05e397e51b52">2.  The test in the if statement in Line 4 is wrong.  We should be testing for whether the current word we?re looking at is NOT in the stopword list ? only then do we add it to our new list.  Change the line to:;</fragname>
<operation>Insert</operation>
</change>
<explanation>How does your explanation match up to the one shown here?

Note how the problem is clearly stated, and how it affects the operation of the function, and also how the code should be changed.

There are no more tests, so we can move on to the next strategy.  Two down, two to go...</explanation>
</step>
<step num = "18">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<fragname id="aad5e936-76ad-45f1-9734-fdab176d156d">4.  Check tests in if statements and while loops.  Are you sure the test is the correct one?  Compound Boolean expressions, where you are using more than one ?and? or ?or? operator, can often be used incorrectly.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>FindErrorsStrategies</docname>
<fragname id="cd376025-8d81-47d3-9535-93c9b7afbe41">5.  In Python, indentation is important.  Is every statement at the correct indentation level?  It is easy to miss this, so look carefully.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>FindErrorsProblem</docname>
<fragname id="3462831a-ce02-4d14-a408-6c5eab8e5d06">stop_word_list</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>FindErrorsProblem</docname>
<fragname id="0e1b4c1a-ac77-41c6-ba13-d9175fcc8c72"> in </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>FindErrorsProblem</docname>
<fragname id="81baff36-9a12-44f1-8d8a-0925a0d7cff2">i</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>FindErrorsProblem</docname>
<fragname id="4fb5fa51-bd75-4b77-ae71-81c1fbb84ed0">        if </fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Now we need to review each line of code in relation to its neighbours above and below, to determine whether it is in the right position - whether it is inside or outside a loop body, or an if branch, or else branch, or inside a function or outside it.  Indentation is so crucial in Python!

Can you see any problems with indentation in this code?
</explanation>
</step>
<step num = "19">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<operation>Ask Answer</operation>
<question num = "19" content="Can you see any indentation problems?" type="MULTI_CHOICE">
<option num ="0"  content="Yes"></option>
<option num ="1"  content="No"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "20">
<change num = "1">
<docname>FindErrorsProblem</docname>
<fragname id="2194069b-1a6f-4e0d-adc8-2657e0edf58e">words</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsProblem</docname>
<fragname id="de5378ab-4d5f-4c8a-9d0e-209ceedab3be">        return </fragname>
<operation>Highlight</operation>
</change>
<explanation>Well, there is an indentation problem.  Take a look at the highlighted line - the return statement.  There is a problem with the indentation.  Try to write down precisely what the problem is and how you would solve it in the next step...</explanation>
</step>
<step num = "21">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<operation>Ask Answer</operation>
<question num = "21" content="Write down how you would explain the indentation problem with the return statement, and how you would solve it." type="DESCRIPTIVE">
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "22">
<change num = "1">
<docname>FindErrorsAnswers</docname>
<fragname id="afcfa1d6-5b74-4fac-a8cf-8b3e1f867a6f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>FindErrorsAnswers</docname>
<fragname id="dfe03ce9-a931-4d5f-a219-a753295b1aa0">3.  The return statement is not indented correctly.  Just now the function will return the first time a valid word is found.  It should be moved out to the same indentation as the for loop header - that is, it should only be executed once the for loop is finished.;</fragname>
<operation>Insert</operation>
</change>
<explanation>Again, compare answers.  Note how the effect of the error is described too, really showing that it is fully understood.

The rest of the indentation is ok, so let's move on to the final strategy for finding errors.</explanation>
</step>
<step num = "23">
<change num = "1">
<docname>FindErrorsStrategies</docname>
<fragname id="c8f58e36-a198-4d6e-8b8a-275f386d8877">6.  Are the computations required by the problem being performed correctly?  This isn't just arithmetic operations - are all the boolean and string and list and dictionary operations correct?;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsStrategies</docname>
<fragname id="cd376025-8d81-47d3-9535-93c9b7afbe41">5.  In Python, indentation is important.  Is every statement at the correct indentation level?  It is easy to miss this, so look carefully.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>FindErrorsProblem</docname>
<fragname id="de5378ab-4d5f-4c8a-9d0e-209ceedab3be">        return </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>FindErrorsProblem</docname>
<fragname id="2194069b-1a6f-4e0d-adc8-2657e0edf58e">words</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Finally, we need to check any computations being performed in the code.

Take a look at the code.  What have we not examined closely already?</explanation>
</step>
<step num = "24">
<change num = "1">
<docname>FindErrorsProblem</docname>
<fragname id="bf28b6a9-c4bd-428a-8c75-ac4bd418bce5">i</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>FindErrorsProblem</docname>
<fragname id="2b6d8930-eb11-45b1-9537-f6a37d939f56"> + </fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>FindErrorsProblem</docname>
<fragname id="c9096dfd-9ad5-4e70-98a8-f1f82ee4bc99">words</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>FindErrorsProblem</docname>
<fragname id="85cfaebb-d86a-469d-9059-21946e1526af"> = </fragname>
<operation>Highlight</operation>
</change>
<change num = "5">
<docname>FindErrorsProblem</docname>
<fragname id="47e3f720-176f-473c-8a3c-d2ee7f7bdb03">            words</fragname>
<operation>Highlight</operation>
</change>
<explanation>This is about the only calculation line we haven't checked carefully yet.  The condition in the if has been done.  The initialisation of the variables has been done (and we've fixed that problem with this line).  The loop is ok.  So there's just this line.  Does it look ok?</explanation>
</step>
<step num = "25">
<change num = "1">
<docname>FindErrorsProblem</docname>
<operation>Ask Answer</operation>
<question num = "25" content="Is this line ok?" type="MULTI_CHOICE">
<option num ="0"  content="Yes"></option>
<option num ="1"  content="No"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "26">
<explanation>Well actually, it's not ok.  Can you see why?  Write down what you think the problem is and how to solve it in the next step...</explanation>
</step>
<step num = "27">
<change num = "1">
<docname>FindErrorsProblem</docname>
<operation>Ask Answer</operation>
<question num = "27" content="Write down what you think is wrong with this line, and how to correct it." type="DESCRIPTIVE">
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "28">
<change num = "1">
<docname>FindErrorsAnswers</docname>
<fragname id="4d7e52db-0605-4c56-b3be-f4b221da4ca6">    words = words + [i];</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>FindErrorsAnswers</docname>
<fragname id="49b5f917-dd3d-4ddd-b705-dffce314958f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>FindErrorsAnswers</docname>
<fragname id="033c8bfc-6efb-403a-b9bb-0afdd81eaf2f">4.  The update to the words variable on line 5 is incorrect.  A word is being added to a list, but only lists can be added to lists.  The line should read:;</fragname>
<operation>Insert</operation>
</change>
<explanation>Compare answers again - you should have both the cause of the error - that you cannot add a string to a list - and the solution - that you need to put the string in a list on its own - then it can be added to the words list.</explanation>
</step>
<step num = "29">
<explanation>And with that, we're done - we've found our four errors.

You may have other strategies as well - feel free to post them on Moodle for others to make use of.

In any case, have these at your fingertips in the exam, so that if you can't immediately see the errors just by looking at the code, you have a set of actions you can apply to the code to hopefully find those errors.</explanation>
</step>
</process>
<process name ="LinearSearchDoorEntryHaggis" app = "LinearSearchDoorEntryHaggis" processID ="cb0cad05-caad-45b3-a428-4019aa1f6784">
<step num = "1">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="a24f2002-681d-42d0-93a5-4ccae14704b0">b) Write the subprogram itself in a language of your choice.;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="1732516d-9662-4345-976a-504f330786e8">a) Write a general specification for the subprogram.;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3c91e2bd-1e60-45d6-8b49-3462a0d0fce2">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="a724344e-7554-4315-806d-0de3f8848c22">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2d12fb1e-cc65-4dc4-9729-196db7c90518">Assume the subprogram can access a global variable containing an existing array of authorised users' ids.;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3c76e122-bf76-438a-a68e-b0366f022ec6">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2315e73f-7c36-4bb5-ac9e-4faa0d3dff13">whether the person should be permitted to enter.;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="a37dbbcd-801c-47d1-8c0b-de4d8ca613a0">according to </fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3253ec36-cf3a-44d3-b7da-1dabd8fe32f8">returning a Boolean value </fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="d87a149e-7497-44e0-b4cf-bcedf69d2190">and </fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="1391319c-43b9-4876-9479-3549ddf6e10d">A door entry system is monitoring access to a building.  Every time sometime tries to enter the building by swiping their id card, the door entry system will call a subprogram </fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="c2d95124-8838-4046-8957-1294ceb3c5e7">;</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3be074c0-7ea6-475e-8fac-8e438dfc02c7">Linear search problem;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here is the problem.  Read through all of it first.  You need to do this to have at least **seen** all parts of the problem, even if you do not understand everything yet.</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="7752f95f-3953-474a-95ed-820378b75503">Assume  : </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="7752f95f-3953-474a-95ed-820378b75503">Assume  : </fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9de6a86e-bf35-4511-90f2-07f1f3663d9d">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="8415c4fc-505f-4764-8357-e234f7fb682f">Action  : </fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="457b69f4-ecad-4419-937b-9b10620ced7b">;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="7c970691-9a48-46e1-b41d-9a54af3a817a">Return value(s) : </fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="23bf322e-fcff-411b-b0e3-76a700621aa5">;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="adadaa64-8cbe-47a3-9ed4-dcd8fe740a79">Data in / Parameters : </fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="42ded215-ca23-453e-a59f-9e848a70d40f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="37890d7a-5861-40e1-8e1a-06e1ef300025">Name  : </fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="4315d97c-b4fb-445e-a16d-1fbc1d482492">;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="e4c17d11-5e1e-4469-83a4-70b226862de3">Subprogram : </fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="1732516d-9662-4345-976a-504f330786e8">a) Write a general specification for the subprogram.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "14">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="7a622485-23c5-4c62-8e1c-c37c7e84899f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="25799b2c-8c2c-4733-b01e-e484a75530ba">General Spec;</fragname>
<operation>Insert</operation>
</change>
<change num = "16">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b506b49b-3ee8-4ead-8ae8-ce84b6f9e913">;</fragname>
<operation>Insert</operation>
</change>
<change num = "17">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="c06a58ed-937b-4b95-8e2c-98d4504e0f2c">--------------------------------------;</fragname>
<operation>Insert</operation>
</change>
<explanation>This task requires us to write a subprogram.  A good first step for such a task is to note down what we know about the subprogram we have been asked to write.  An experienced programmer could probably do this in their head, but earlier on, it is worth writing it down.
</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="1732516d-9662-4345-976a-504f330786e8">a) Write a general specification for the subprogram.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<operation>Ask Answer</operation>
<question num = "3" content="What kind of subprogram is required?" type="MULTI_CHOICE">
<option num ="0"  content="Function"></option>
<option num ="1"  content="Procedure"></option>
<option num ="2"  content="I don't know"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5f03a03e-3d2e-45e9-8def-8f173ffdd0a8">a Boolean value, </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="4315d97c-b4fb-445e-a16d-1fbc1d482491">function</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3253ec36-cf3a-44d3-b7da-1dabd8fe32f8">returning a Boolean value </fragname>
<operation>Highlight</operation>
</change>
<explanation>We asked whether it is a function or procedure that is required.
It is a function that we want - because the text tells us that the subprogram is returning a value to the code that called the subprogram.
</explanation>
</step>
<step num = "5">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3253ec36-cf3a-44d3-b7da-1dabd8fe32f8">returning a Boolean value </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<operation>Ask Answer</operation>
<question num = "5" content="What would be a good name for the function, given that it returns a Boolean as described above?" type="DESCRIPTIVE">
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2315e73f-7c36-4bb5-ac9e-4faa0d3dff13">whether the person should be permitted to enter.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="42ded215-ca23-453e-a59f-9e848a70d40e">permitEntry</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what would be a good name for the function, given it returns a Boolean value.
Such a function is usually a test of some kind - is something ok, is something right, is it this, etc?  Hence if the name can read a bit like a question, that is good.    Here, looking at the highlighted text in the problem, &quot;permitEntry&quot; could be used - if reading code with a call to this function, one would read it as permitEntry( x )?, as a question - can x be permitted entry?</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2315e73f-7c36-4bb5-ac9e-4faa0d3dff13">whether the person should be permitted to enter.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<operation>Ask Answer</operation>
<question num = "7" content="How many parameters should the new function take?" type="MULTI_CHOICE">
<option num ="0"  content="0"></option>
<option num ="1"  content="1"></option>
<option num ="2"  content="2"></option>
<option num ="3"  content="3"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "8">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Highlight</operation>
</change>
<explanation>We asked how many parameters are required.
Just one, as indicated in the problem text.  The problem text is often explicit on these matters, so worth reading closely.
</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<operation>Ask Answer</operation>
<question num = "9" content="We are told that the id from the card is the parameter.  What type should this be?" type="MULTI_CHOICE">
<option num ="0"  content="BOOLEAN"></option>
<option num ="1"  content="INTEGER"></option>
<option num ="2"  content="STRING"></option>
<option num ="3"  content="RECORD"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5456cd67-48fe-4651-b285-5dc114b70287">the person id</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="23bf322e-fcff-411b-b0e3-76a700621aa4"> - assume this is a string, since no information given</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what type the id parameter should be.
We are NOT told any details about the nature of the id - for example, which of letters, digits, and non alpha-numeric characters can it contain?  If it is digits only, then INTEGER is a possibility, but id numbers can be very long, longer than the INTEGER type can always permit.  Also, we never wish to perform arithmetic on an id number.  For these reasons, STRING is the safest solution here.</explanation>
</step>
<step num = "11">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="457b69f4-ecad-4419-937b-9b10620ced7a">true if the supplied id is authorised to enter</fragname>
<operation>Insert</operation>
</change>
<explanation>We can also fully specify the return value now.
</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b5289b05-2fe3-404b-b14c-93c52e0604fd">    id is  present or not;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9de6a86e-bf35-4511-90f2-07f1f3663d9c">search through the authorised users' array to see if the supplied</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2d12fb1e-cc65-4dc4-9729-196db7c90518">Assume the subprogram can access a global variable containing an existing array of authorised users' ids.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Highlight</operation>
</change>
<explanation>The general action can be written down in English.  The problem tells us that the subprogram will have access to an id card number and an array of authorised users.  Hence our task is to find out if the id is in the array.
</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9070cad6-8d8c-4d7e-a431-cbdccd94dbca">an array of strings of authorised users, called authUsers</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2d12fb1e-cc65-4dc4-9729-196db7c90518">Assume the subprogram can access a global variable containing an existing array of authorised users' ids.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Unhighlight</operation>
</change>
<explanation>It is worth noting the assumptions we are making, where insufficient information is provided.  In this case, we have come up with a name for the existing array, and assumed that ids are represented as strings.</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="a24f2002-681d-42d0-93a5-4ccae14704b0">b) Write the subprogram itself in a language of your choice.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="8880d222-d7b4-4229-9720-1ad5409aa967">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="fc08a62d-8732-4395-a328-fa383bb6d289"># of ids;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="c7f011b5-5147-4ef5-afad-ed70a699c730"># Function to check whether a given id is in an array ;</fragname>
<operation>Insert</operation>
</change>
<explanation>Now to part (b) of the problem - writing  the code itself.  We are going to use Haggis / SQA reference language here.  First, let us add in a header comment to explain the purpose of the code.
</explanation>
</step>
<step num = "15">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9070cad6-8d8c-4d7e-a431-cbdccd94dbca">an array of strings of authorised users, called authUsers</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="45ad8790-91a0-4fbd-8607-478e18419436">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="747dc5fa-ef28-42fb-8f86-aa45604e97a1">SET authUsers TO &lt;array of STRING&gt;;</fragname>
<operation>Insert</operation>
</change>
<explanation>For completeness, first put in the array of authorised users.  We do not need to know the details, and so the array itself is elided inside the &lt;...&gt; section - all we need to know is that it is an array of strings.

Before moving on, can you work out what the function header line should look like?  You have the information you need in the specification we just completed...
</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="457b69f4-ecad-4419-937b-9b10620ced7a">true if the supplied id is authorised to enter</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5f03a03e-3d2e-45e9-8def-8f173ffdd0a8">a Boolean value, </fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="23bf322e-fcff-411b-b0e3-76a700621aa4"> - assume this is a string, since no information given</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5456cd67-48fe-4651-b285-5dc114b70287">the person id</fragname>
<operation>Highlight</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="42ded215-ca23-453e-a59f-9e848a70d40e">permitEntry</fragname>
<operation>Highlight</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="70e6b18b-6e83-4e1d-bd41-27c846fb73d3">END FUNCTION;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="0cfc24c8-f252-4ac7-93fa-8ad8e8f549bd">FUNCTION permitEntry( STRING personId ) RETURNS BOOLEAN;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9070cad6-8d8c-4d7e-a431-cbdccd94dbca">an array of strings of authorised users, called authUsers</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Did you work this out correctly?  Take a look at the function framework - the header line and the closing line.  Note how we can draw all the necessary information from the general specification we have already constructed.
</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b5289b05-2fe3-404b-b14c-93c52e0604fd">    id is  present or not;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9de6a86e-bf35-4511-90f2-07f1f3663d9c">search through the authorised users' array to see if the supplied</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="457b69f4-ecad-4419-937b-9b10620ced7a">true if the supplied id is authorised to enter</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5f03a03e-3d2e-45e9-8def-8f173ffdd0a8">a Boolean value, </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="23bf322e-fcff-411b-b0e3-76a700621aa4"> - assume this is a string, since no information given</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5456cd67-48fe-4651-b285-5dc114b70287">the person id</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "7">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="42ded215-ca23-453e-a59f-9e848a70d40e">permitEntry</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Looking again at the action in our specification, we need to search through the array.  We have seen how to do this using the linear search method.
There are many ways of setting up a linear search - we simply need to ensure that we look at each element in the array in turn, checking if it is the one we are looking for.  We could use either a while or a for loop for this.  For reasons that will become clearer later (see from Step 31), we will use a while loop this time.</explanation>
</step>
<step num = "18">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9de6a86e-bf35-4511-90f2-07f1f3663d9c">search through the authorised users' array to see if the supplied</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b5289b05-2fe3-404b-b14c-93c52e0604fd">    id is  present or not;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="63ca33e1-8656-456a-ac96-353d9bb4265b">    SET found TO false;</fragname>
<operation>Insert</operation>
</change>
<explanation>Before adding the loop, we are going to create a Boolean variable which records whether we have found the value - true if found, false otherwise.  Before we start searching, we (obviously) cannot have found it, so we set the variable to false.
</explanation>
</step>
<step num = "19">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="2708f83a-7a8f-4f66-9c46-e9f1516afc69">    RETURN found;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="5a8088bb-fb0f-479e-b2e3-4714e0cb2fac">;</fragname>
<operation>Insert</operation>
</change>
<explanation>At the end of the function, we will have either found the id we are looking for or not.  This outcome will be recorded in the 'found' variable.  So, we can simply return it.  The linear search comes in the middle!
</explanation>
</step>
<step num = "20">
<explanation>For the search, we first need code that can visit each element of the array in turn.  For this we need to generate, using a loop, index values in sequence starting from the first index (this is 0 for the SQA reference language) up to the last index of the array.  A simple counter variable, controlling a while loop, is one way of doing this...
</explanation>
</step>
<step num = "21">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="d3c93dae-df49-4aab-8e1a-bc9bb4d3255b">    SET idPos TO 0;</fragname>
<operation>Insert</operation>
</change>
<explanation>First, the counter variable, called idPos (as it will be holding the index value to an element in the ids array) is created.  The initial value is set to zero, as arrays are indexed from zero in the SQA reference language.
</explanation>
</step>
<step num = "22">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="bdccf551-b530-4547-81c4-56b9f549861a">    END WHILE;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="04bd5927-b305-458c-9295-c404abc9ce60">        SET idPos TO idPos + 1;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="2f37f866-9e2f-450c-9029-b24ac4f079b0"> DO;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="b4641ac6-8151-48df-b4df-8a9a2cf8669c">&lt;test to continue looping&gt;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="97202177-298e-42e9-8414-1934825269a1">    WHILE </fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="ce3ffff4-23b2-4e3b-8df9-f502cb802a8f">;</fragname>
<operation>Insert</operation>
</change>
<explanation>Next, the loop is added.  We won't worry about the test to continue the loop  yet (this will replace the &lt;...&gt; part in a moment) - just now check that the loop is otherwise going to work correctly.  Is it?
</explanation>
</step>
<step num = "23">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "23" content="It is correct!  What should the test be to continue looping?  &quot;length&quot; is a function that returns the length of the array passed as parameter.  Move this question window if necessary so you can see the code being developed." type="MULTI_CHOICE">
<option num ="0"  content="idPos &lt; length( authUsers )"></option>
<option num ="1"  content="idPos &lt;= length( authUsers )"></option>
<option num ="2"  content="idPos &lt; length( authUsers ) - 1"></option>
<option num ="3"  content="idPos &lt;= length( authUsers ) - 1"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "24">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="e5c0832a-5627-4c1f-afc4-b8dfab7fe162">idPos &lt; length( authUsers ) </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="b4641ac6-8151-48df-b4df-8a9a2cf8669c">&lt;test to continue looping&gt;</fragname>
<operation>Delete</operation>
</change>
<explanation>We asked which is the right test to continue the while loop.
Well, we need to continue looping if there are elements that have not yet been examined, that is, whenever the index value held in the idPos variable is still a valid index.  
So the correct answer is (a) - the index value must be less than the length of the array.  Remember that, in the SQA reference language, index values run from zero up to one less than the length of the array - if the array contains three items, then the valid index values would be 0, 1, and 2.  3 itself is not a valid index value.  So as long as the idPos variable contains a value that is less than the array length, we should continue looping.
</explanation>
</step>
<step num = "25">
<explanation>Ok, so this code generates the correct sequence of index values in the variable 'idPos', as the loop executes.  Now, we want to test whether the id value at the current position in the array is the same as the id we are looking for, and, if it is, we want to record that we have found a match.  So we need a selection statement...</explanation>
</step>
<step num = "26">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "26" content="What kind of selection statement do we need here?" type="MULTI_CHOICE">
<option num ="0"  content="A one-arm if statement / &quot;do or skip&quot;"></option>
<option num ="1"  content="A two-arm if statement / &quot;do this or that&quot;"></option>
<option num ="2"  content="A multiple-option selection / &quot;one action from many&quot;"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "27">
<explanation>We asked what kind of selection statement is required.
It is a &quot;do or skip&quot; / one arm selection statement - since if we find a match, we take a record of finding it, but if we don't find a match, there is no specific action to take.
Now consider the test itself in the if statement before moving on...</explanation>
</step>
<step num = "28">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="ab039eb1-a694-499d-85fd-9778c6c022cf">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="f1930345-458b-40cd-874d-3f5d395cf919">        END IF;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="e8953fae-ff83-4405-ae89-e52f436e7b42">            &lt;action to take when we find a match&gt;;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="3df37dd8-ecf6-4e5c-9f62-136545c151c4">        IF personId = authUsers[ idPos ] THEN;</fragname>
<operation>Insert</operation>
</change>
<explanation>So, it is a simple IF statement.  Look at the test... is it what you expected?</explanation>
</step>
<step num = "29">
<explanation>What should we do when we find a match?  What code should replace the &lt;...&gt; section?  What variable should be updated?  And to what new value?  Work this out before continuing...</explanation>
</step>
<step num = "30">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="6af29113-bd87-4305-b2ed-a80950c07bc7">            SET found TO true;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="e8953fae-ff83-4405-ae89-e52f436e7b42">            &lt;action to take when we find a match&gt;;</fragname>
<operation>Delete</operation>
</change>
<explanation>It is just a simple update to the found variable, to true, to indicate that a match has been found.</explanation>
</step>
<step num = "31">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "31" content="Are we finished?  Which of the following is true?" type="MULTI_CHOICE">
<option num ="0"  content="The code will give the correct output and cannot be made any better"></option>
<option num ="1"  content="The code will give the correct output, but could be made more efficient"></option>
<option num ="2"  content="The code will not give the correct output "></option>
<option num ="3"  content="I have no idea"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "32">
<explanation>We asked if the code was finished.
It will work correctly in its current format, but it could be more efficient... let us explore this...
</explanation>
</step>
<step num = "33">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "33" content="Assume the authUsers array has 100 entries, with id &quot;123&quot; in the very first entry.  If the function is called with id &quot;123&quot; as parameter, how many times will the body of the while loop be executed?" type="MULTI_CHOICE">
<option num ="0"  content="0"></option>
<option num ="1"  content="1"></option>
<option num ="2"  content="2"></option>
<option num ="3"  content="100"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "34">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="04bd5927-b305-458c-9295-c404abc9ce60">        SET idPos TO idPos + 1;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="e5c0832a-5627-4c1f-afc4-b8dfab7fe162">idPos &lt; length( authUsers ) </fragname>
<operation>Highlight</operation>
</change>
<explanation>We asked how many times the loop body would be executed if a match was found on the very first entry in authUsers.
The answer is 100.  The test to continue looping and the increment to the idPos variable are entirely separate from the found variable, and so they continue until all 100 loops are completed.  The 99 loops after the first one are in a sense wasted, as we knew after the very first one that we had found the value we were looking for.
</explanation>
</step>
<step num = "35">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="97202177-298e-42e9-8414-1934825269a1">    WHILE </fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="e5c0832a-5627-4c1f-afc4-b8dfab7fe162">idPos &lt; length( authUsers ) </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="04bd5927-b305-458c-9295-c404abc9ce60">        SET idPos TO idPos + 1;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>How can we avoid carrying out these extra loops?  Look at the condition in the WHILE loop header.  How could this be extended to also test for whether we can finish early?  Consider what could be added just after the highlighted word WHILE</explanation>
</step>
<step num = "36">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "36" content="Which one of the following, added just after the word WHILE at the start of the loop, would cause the loop to exit straight after a match was found?" type="MULTI_CHOICE">
<option num ="0"  content="found OR"></option>
<option num ="1"  content="found AND"></option>
<option num ="2"  content="NOT found OR"></option>
<option num ="3"  content="NOT found AND"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "37">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="d7d17de5-7a80-4e28-9d27-fb295e25401d">NOT found AND </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionHaggis</docname>
<fragname id="97202177-298e-42e9-8414-1934825269a1">    WHILE </fragname>
<operation>Unhighlight</operation>
</change>
<explanation>We asked what code was needed to cause the loop to exit once a match was found.
Of course, the condition at the start of the while loop is the condition to ***continue*** looping.  So, we want to continue looping while we ***have not*** found a match, in other words, while the found variable contains false.  In programming language terms, that is &quot;NOT found&quot; - which gives back true when found contains false.  We also want to continue looping while there are more elements to look in (this is the original test in the while statement).  We continue to loop while ***both*** of these tests are true, and so we must combine them with AND.</explanation>
</step>
<step num = "38">
<explanation>And now we are done!  
Note that adding this extra piece in is why we used a WHILE loop, not a FOR loop (remember we mentioned this back in Step 17?).  For efficiency, we want to exit the loop as soon as we have a match - but we don't know in advance how many times round the loop the program will go before the match is found.  For such a loop, we need WHILE.

Go back and re-read the explanations if there are parts you do not understand, and if it still does not make sense, take a note of it and ask your teacher later.  </explanation>
</step>
</process>
<process name ="LinearSearchDoorEntryPython" app = "LinearSearchDoorEntryPython" processID ="c0630322-3aaa-41b9-a304-f96842d83b01">
<step num = "1">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="1732516d-9662-4345-976a-504f330786e8">a) Write a general specification for the subprogram.;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="a24f2002-681d-42d0-93a5-4ccae14704b0">b) Write the subprogram itself in a language of your choice.;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3c91e2bd-1e60-45d6-8b49-3462a0d0fce2">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="a724344e-7554-4315-806d-0de3f8848c22">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2d12fb1e-cc65-4dc4-9729-196db7c90518">Assume the subprogram can access a global variable containing an existing array of authorised users' ids.;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3c76e122-bf76-438a-a68e-b0366f022ec6">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2315e73f-7c36-4bb5-ac9e-4faa0d3dff13">whether the person should be permitted to enter.;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="a37dbbcd-801c-47d1-8c0b-de4d8ca613a0">according to </fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3253ec36-cf3a-44d3-b7da-1dabd8fe32f8">returning a Boolean value </fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="d87a149e-7497-44e0-b4cf-bcedf69d2190">and </fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="1391319c-43b9-4876-9479-3549ddf6e10d">A door entry system is monitoring access to a building.  Every time sometime tries to enter the building by swiping their id card, the door entry system will call a subprogram </fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="c2d95124-8838-4046-8957-1294ceb3c5e7">;</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3be074c0-7ea6-475e-8fac-8e438dfc02c7">Linear search problem;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here is the problem.  Read through all of it first.  You need to do this to have at least **seen** all parts of the problem, even if you do not understand everything yet.</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="7752f95f-3953-474a-95ed-820378b75503">Assume  : </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9de6a86e-bf35-4511-90f2-07f1f3663d9d">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="8415c4fc-505f-4764-8357-e234f7fb682f">Action  : </fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="457b69f4-ecad-4419-937b-9b10620ced7b">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="7c970691-9a48-46e1-b41d-9a54af3a817a">Return value(s) : </fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="23bf322e-fcff-411b-b0e3-76a700621aa5">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="adadaa64-8cbe-47a3-9ed4-dcd8fe740a79">Data in / Parameters : </fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="42ded215-ca23-453e-a59f-9e848a70d40f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="37890d7a-5861-40e1-8e1a-06e1ef300025">Name  : </fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="4315d97c-b4fb-445e-a16d-1fbc1d482492">;</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="e4c17d11-5e1e-4469-83a4-70b226862de3">Subprogram : </fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="1732516d-9662-4345-976a-504f330786e8">a) Write a general specification for the subprogram.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "13">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="7a622485-23c5-4c62-8e1c-c37c7e84899f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="25799b2c-8c2c-4733-b01e-e484a75530ba">General Spec;</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b506b49b-3ee8-4ead-8ae8-ce84b6f9e913">;</fragname>
<operation>Insert</operation>
</change>
<change num = "16">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="c06a58ed-937b-4b95-8e2c-98d4504e0f2c">--------------------------------------;</fragname>
<operation>Insert</operation>
</change>
<explanation>This task requires us to write a subprogram.  A good first step for such a task is to note down what we know about the subprogram we have been asked to write.  An experienced programmer could probably do this in their head, but earlier on, it is worth writing it down.
</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="1732516d-9662-4345-976a-504f330786e8">a) Write a general specification for the subprogram.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<operation>Ask Answer</operation>
<question num = "3" content="What kind of subprogram is required?" type="MULTI_CHOICE">
<option num ="0"  content="Function"></option>
<option num ="1"  content="Procedure"></option>
<option num ="2"  content="I don't know"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5f03a03e-3d2e-45e9-8def-8f173ffdd0a8">a Boolean value, </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="4315d97c-b4fb-445e-a16d-1fbc1d482491">function</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3253ec36-cf3a-44d3-b7da-1dabd8fe32f8">returning a Boolean value </fragname>
<operation>Highlight</operation>
</change>
<explanation>We asked whether it is a function or procedure that is required.
It is a function that we want - because the text tells us that the subprogram is returning a value to the code that called the subprogram.
</explanation>
</step>
<step num = "5">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="3253ec36-cf3a-44d3-b7da-1dabd8fe32f8">returning a Boolean value </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<operation>Ask Answer</operation>
<question num = "5" content="What would be a good name for the function, given that it returns a Boolean as described above?" type="DESCRIPTIVE">
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2315e73f-7c36-4bb5-ac9e-4faa0d3dff13">whether the person should be permitted to enter.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="42ded215-ca23-453e-a59f-9e848a70d40e">permitEntry</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what would be a good name for the function, given it returns a Boolean value.
Such a function is usually a test of some kind - is something ok, is something right, is it this, etc?  Hence if the name can read a bit like a question, that is good.    Here, looking at the highlighted text in the problem, &quot;permitEntry&quot; could be used - if reading code with a call to this function, one would read it as permitEntry( x )?, as a question - can x be permitted entry?</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2315e73f-7c36-4bb5-ac9e-4faa0d3dff13">whether the person should be permitted to enter.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<operation>Ask Answer</operation>
<question num = "7" content="How many parameters should the new function take?" type="MULTI_CHOICE">
<option num ="0"  content="0"></option>
<option num ="1"  content="1"></option>
<option num ="2"  content="2"></option>
<option num ="3"  content="3"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "8">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Highlight</operation>
</change>
<explanation>We asked how many parameters are required.
Just one, as indicated in the problem text.  The problem text is often explicit on these matters, so worth reading closely.
</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<operation>Ask Answer</operation>
<question num = "9" content="We are told that the id from the card is the parameter.  What type should this be?" type="MULTI_CHOICE">
<option num ="0"  content="bool"></option>
<option num ="1"  content="int"></option>
<option num ="2"  content="str"></option>
<option num ="3"  content="dict"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5456cd67-48fe-4651-b285-5dc114b70287">the person id</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="23bf322e-fcff-411b-b0e3-76a700621aa4"> - assume this is a string, since no information given</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what type the id parameter should be.
We are NOT told any details about the nature of the id - for example, which of letters, digits, and non alpha-numeric characters can it contain?  If it is digits only, then 'int' is a possibility, but id numbers can be very long, longer than the 'int' type can always permit.  Also, we never wish to perform arithmetic on an id number.  For these reasons, 'str', the string type, is the safest solution here.</explanation>
</step>
<step num = "11">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="457b69f4-ecad-4419-937b-9b10620ced7a">true if the supplied id is authorised to enter</fragname>
<operation>Insert</operation>
</change>
<explanation>We can also fully specify the return value now.
</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b5289b05-2fe3-404b-b14c-93c52e0604fd">    id is  present or not;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9de6a86e-bf35-4511-90f2-07f1f3663d9c">search through the authorised users' array to see if the supplied</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2d12fb1e-cc65-4dc4-9729-196db7c90518">Assume the subprogram can access a global variable containing an existing array of authorised users' ids.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Highlight</operation>
</change>
<explanation>The general action can be written down in English.  The problem tells us that the subprogram will have access to an id card number and an array of authorised users.  Hence our task is to find out if the id is in the array.
</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9070cad6-8d8c-4d7e-a431-cbdccd94dbca">an array of strings of authorised users, called authUsers</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="2d12fb1e-cc65-4dc4-9729-196db7c90518">Assume the subprogram can access a global variable containing an existing array of authorised users' ids.;</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b8e753a4-a395-42ae-a910-ab0ea2725a0b">taking the id from the card as parameter </fragname>
<operation>Unhighlight</operation>
</change>
<explanation>It is worth noting the assumptions we are making, where insufficient information is provided.  In this case, we have come up with a name for the existing array, and assumed as discussed earlier that ids are represented as strings.</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="e79f51f2-05b1-47b1-9f8a-12ac756f97c1">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="9d0f0d4e-be4d-40e5-a75e-389e59cce5a3"># is authorised to enter;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="7f3159bc-8518-4026-a059-e7e4e028bd94"># Function to determine if user supplied as parameter;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="a24f2002-681d-42d0-93a5-4ccae14704b0">b) Write the subprogram itself in a language of your choice.;</fragname>
<operation>Highlight</operation>
</change>
<explanation>Now to part (b) of the problem - writing  the code itself.  We are using Python here.  First, let us add in a header comment to explain the purpose of the code.
</explanation>
</step>
<step num = "15">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="832966e4-2c13-4d84-b6c8-a837453b84d5">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="b6363ecb-3b38-430c-aa3e-6cc25f62191d">authUsers = [ &quot;a241&quot;, &quot;z742&quot;, &quot;j123&quot;, &quot;k754&quot;];</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="b64436c3-09eb-494a-b55c-08da2b501689"># This is an example array of ids for authorised users, for testing;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9070cad6-8d8c-4d7e-a431-cbdccd94dbca">an array of strings of authorised users, called authUsers</fragname>
<operation>Highlight</operation>
</change>
<explanation>For completeness, first put in the array of authorised users.  This is good practice as (a) it will help to support testing the code later, and (b) it will enable the code to be compiled/executed.  Remember - this is an array of strings.

Before moving on, can you work out what the function header line should look like?  You have the information you need in the specification we just completed...
</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="ebfaf0bc-7cd2-47d9-83c5-4919769ca87b">def permitEntry( personId ):;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="457b69f4-ecad-4419-937b-9b10620ced7a">true if the supplied id is authorised to enter</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5f03a03e-3d2e-45e9-8def-8f173ffdd0a8">a Boolean value, </fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="23bf322e-fcff-411b-b0e3-76a700621aa4"> - assume this is a string, since no information given</fragname>
<operation>Highlight</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5456cd67-48fe-4651-b285-5dc114b70287">the person id</fragname>
<operation>Highlight</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="42ded215-ca23-453e-a59f-9e848a70d40e">permitEntry</fragname>
<operation>Highlight</operation>
</change>
<change num = "7">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9070cad6-8d8c-4d7e-a431-cbdccd94dbca">an array of strings of authorised users, called authUsers</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Did you work this out correctly?  Take a look at the function header line.  Note how we can draw all the necessary information from the general specification we have already constructed.
</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b5289b05-2fe3-404b-b14c-93c52e0604fd">    id is  present or not;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9de6a86e-bf35-4511-90f2-07f1f3663d9c">search through the authorised users' array to see if the supplied</fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="457b69f4-ecad-4419-937b-9b10620ced7a">true if the supplied id is authorised to enter</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5f03a03e-3d2e-45e9-8def-8f173ffdd0a8">a Boolean value, </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="23bf322e-fcff-411b-b0e3-76a700621aa4"> - assume this is a string, since no information given</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="5456cd67-48fe-4651-b285-5dc114b70287">the person id</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "7">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="42ded215-ca23-453e-a59f-9e848a70d40e">permitEntry</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Looking again at the action in our specification, we need to search through the array.  We have seen how to do this using the linear search method.
There are many ways of setting up a linear search - we simply need to ensure that we look at each element in the array in turn, checking if it is the one we are looking for.  We could use either a while or a for loop for this.  For reasons that will become clearer later (see from Step 31), we will use a while loop this time.</explanation>
</step>
<step num = "18">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="eb367a6f-5593-46da-8b68-1e6d1ecd00ea">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="e4f65d58-4daa-4cab-ab7c-fb2e80e25021">    found = False;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="9de6a86e-bf35-4511-90f2-07f1f3663d9c">search through the authorised users' array to see if the supplied</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntryProblem</docname>
<fragname id="b5289b05-2fe3-404b-b14c-93c52e0604fd">    id is  present or not;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Before adding the loop, we are going to create a Boolean variable which records whether we have found the value - true if found, false otherwise.  Before we start searching, we (obviously) cannot have found it, so we set the variable to false.
</explanation>
</step>
<step num = "19">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="c884ae88-bcc4-4deb-9c13-a7ea0f19fbfd">    return found;</fragname>
<operation>Insert</operation>
</change>
<explanation>At the end of the function, we will have either found the id we are looking for or not.  This outcome will be recorded in the 'found' variable.  So, we can simply return it.  The linear search comes in the middle!
</explanation>
</step>
<step num = "20">
<explanation>For the search, we first need code that can visit each element of the array in turn.  For this we need to generate, using a loop, index values in sequence starting from the first index (this is 0 for Python) up to the last index of the array.  A simple counter variable, controlling a while loop, is one way of doing this...
</explanation>
</step>
<step num = "21">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="37d35100-ab85-4f26-80e8-fb3f11b3ad36">    idPos = 0;</fragname>
<operation>Insert</operation>
</change>
<explanation>First, the counter variable, called idPos (as it will be holding the index value to an element in the ids array) is created.  The initial value is set to zero, as arrays are indexed from zero in Python.
</explanation>
</step>
<step num = "22">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="fcab335b-eff6-4488-9e76-9d8d62bd6948">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="0b0d0fdc-c081-4cf5-a57b-5fcf84e5fad8">        idPos = idPos + 1;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="90584dbc-1f9c-4f16-9853-d6657beb2c9c">    ;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="5c0c4993-c158-4b8f-b6a5-bfc6251a6f3a"># test to continue looping;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="a449848c-d4db-4c3c-8c7d-cb2a42a74ee4">    while </fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="e42dd4f5-092e-4b17-b3d1-2f2f9da27bf6">    # Use linear search to see if 'personId' is in 'authUsers';</fragname>
<operation>Insert</operation>
</change>
<explanation>Next, the loop is added.  We won't worry about the test to continue the loop  yet (this will replace the commented part in a moment) - just now check that the loop is otherwise going to work correctly.  Is it?
</explanation>
</step>
<step num = "23">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "23" content="It is correct!  What should the test be to continue looping?   Move this question window if necessary so you can see the code being developed." type="MULTI_CHOICE">
<option num ="0"  content="idPos &lt; len( authUsers )"></option>
<option num ="1"  content="idPos &lt;= len( authUsers )"></option>
<option num ="2"  content="idPos &lt; len( authUsers ) - 1"></option>
<option num ="3"  content="idPos &lt;= len( authUsers ) - 1"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "24">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="5c0c4993-c158-4b8f-b6a5-bfc6251a6f3a"># test to continue looping;</fragname>
<operation>Delete</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="1fd910ab-44de-49df-8f2c-74e89c9d0da3"> :;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="c4ac8a93-48d2-4362-be3d-d655201794d8">idPos &lt; len( authUsers )</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked which is the right test to continue the while loop.
Well, we need to continue looping if there are elements that have not yet been examined, that is, whenever the index value held in the idPos variable is still a valid index.  
So the correct answer is (a) - the index value must be less than the length of the array.  Remember that, in Python, index values run from zero up to one less than the length of the array - if the array contains three items, then the valid index values would be 0, 1, and 2.  3 itself is not a valid index value.  So as long as the idPos variable contains a value that is less than the array length, we should continue looping.
</explanation>
</step>
<step num = "25">
<explanation>Ok, so this code generates the correct sequence of index values in the variable 'idPos', as the loop executes.  Now, we want to test whether the id value at the current position in the array is the same as the id we are looking for, and, if it is, we want to record that we have found a match.  So we need a selection statement...</explanation>
</step>
<step num = "26">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "26" content="What kind of selection statement do we need here?" type="MULTI_CHOICE">
<option num ="0"  content="A one-arm if statement / &quot;do or skip&quot;"></option>
<option num ="1"  content="A two-arm if statement / &quot;do this or that&quot;"></option>
<option num ="2"  content="A multiple-option selection / &quot;one action from many&quot;"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "27">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="72f5fdde-f2d6-4231-9b89-4835b8799378">            # Action to take when we find a match;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="0cdfb40a-4984-468c-96cc-db2405abe00c">        if personId == authUsers[ idPos ]:;</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what kind of selection statement is required.
It is a &quot;do or skip&quot; / one arm selection statement - since if we find a match, we take a record of finding it, but if we don't find a match, there is no specific action to take.
Now consider the test itself in the if statement before moving on...</explanation>
</step>
<step num = "28">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="0cdfb40a-4984-468c-96cc-db2405abe00c">        if personId == authUsers[ idPos ]:;</fragname>
<operation>Highlight</operation>
</change>
<explanation>So, it is a simple 'if' statement.  Look at the test... is it what you expected?</explanation>
</step>
<step num = "29">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="0cdfb40a-4984-468c-96cc-db2405abe00c">        if personId == authUsers[ idPos ]:;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>What should we do when we find a match?  What code should replace the commented section in the body of the if statement?  What variable should be updated?  And to what new value?  Work this out before continuing...</explanation>
</step>
<step num = "30">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="72f5fdde-f2d6-4231-9b89-4835b8799378">            # Action to take when we find a match;</fragname>
<operation>Delete</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="99d233cb-1c60-41f2-9046-e5572118dbcf">            found = True;</fragname>
<operation>Insert</operation>
</change>
<explanation>It is just a simple update to the found variable, to true, to indicate that a match has been found.</explanation>
</step>
<step num = "31">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "31" content="Are we finished?  Which of the following is true?" type="MULTI_CHOICE">
<option num ="0"  content="The code will give the correct output and cannot be made any better"></option>
<option num ="1"  content="The code will give the correct output, but could be made more efficient"></option>
<option num ="2"  content="The code will not give the correct output "></option>
<option num ="3"  content="I have no idea"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "32">
<explanation>We asked if the code was finished.
It will work correctly in its current format, but it could be more efficient... let us explore this...
</explanation>
</step>
<step num = "33">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "33" content="Assume the authUsers array has 100 entries, with id &quot;123&quot; in the very first entry.  If the function is called with id &quot;123&quot; as parameter, how many times will the body of the while loop be executed?" type="MULTI_CHOICE">
<option num ="0"  content="0"></option>
<option num ="1"  content="1"></option>
<option num ="2"  content="2"></option>
<option num ="3"  content="100"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "34">
<explanation>We asked how many times the loop body would be executed if a match was found on the very first entry in authUsers.
The answer is 100.  The test to continue looping and the increment to the idPos variable are entirely separate from the found variable, and so they continue until all 100 loops are completed.  The 99 loops after the first one are in a sense wasted, as we knew after the very first one that we had found the value we were looking for.
</explanation>
</step>
<step num = "35">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="a449848c-d4db-4c3c-8c7d-cb2a42a74ee4">    while </fragname>
<operation>Highlight</operation>
</change>
<explanation>How can we avoid carrying out these extra loops?  Look at the condition in the 'while' loop header.  How could this be extended to also test for whether we can finish early?  Consider what could be added just after the highlighted word 'while'...</explanation>
</step>
<step num = "36">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "36" content="Which one of the following, added just after the word 'while' at the start of the loop, would cause the loop to exit straight after a match was found?" type="MULTI_CHOICE">
<option num ="0"  content="found or"></option>
<option num ="1"  content="found and"></option>
<option num ="2"  content="not found or"></option>
<option num ="3"  content="not found and"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "37">
<change num = "1">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="aeb968ed-0ca2-428d-8f59-45a39f134105">not found and </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>LinearSearchDoorEntrySolutionPython</docname>
<fragname id="a449848c-d4db-4c3c-8c7d-cb2a42a74ee4">    while </fragname>
<operation>Unhighlight</operation>
</change>
<explanation>We asked what code was needed to cause the loop to exit once a match was found.
Of course, the condition at the start of the while loop is the condition to ***continue*** looping.  So, we want to continue looping while we ***have not*** found a match, in other words, while the found variable contains false.  In programming language terms, that is &quot;not found&quot; - which gives back true when found contains false.  We also want to continue looping while there are more elements to look in (this is the original test in the while statement).  We continue to loop while ***both*** of these tests are true, and so we must combine them with 'and'.</explanation>
</step>
<step num = "38">
<explanation>And now we are done!  
Note that adding this extra piece in is why we used a while loop, not a for loop (remember we mentioned this back in Step 17?).  For efficiency, we want to exit the loop as soon as we have a match - but we don't know in advance how many times round the loop the program will go before the match is found.  For such a loop, we need while.

Go back and re-read the explanations if there are parts you do not understand, and if it still does not make sense, take a note of it and ask your teacher later.  </explanation>
</step>
</process>
<process name ="countEntriesPython" app = "countEntriesPython" processID ="a0ba1f60-d097-4b0b-a25b-13a2443102ed">
<step num = "1">
<change num = "1">
<docname>countEntriesProblemPython</docname>
<fragname id="e0427a92-7a7f-406c-afb4-c095183b98f9">b) Write the subprogram itself in Python.;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesProblemPython</docname>
<fragname id="6a6acb3a-ed51-4fe5-add9-d01209cef01e">a) Write a general specification for the subprogram.;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesProblemPython</docname>
<fragname id="5e779845-f1a0-4202-8986-7c2c54e3cfa5">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesProblemPython</docname>
<fragname id="d01eafee-3308-48b4-8175-c2667c539e50">Once again, you should:;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesProblemPython</docname>
<fragname id="ac3fb508-0d16-4be7-8274-08022f5c2bc6">;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesProblemPython</docname>
<fragname id="4b18f2b2-9ab2-486e-be65-702c5b02bf1a">the building.;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>countEntriesProblemPython</docname>
<fragname id="e14bf73c-7f90-4aab-94c0-cf10c479376f">returns the number of times that user has successfully entered </fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>countEntriesProblemPython</docname>
<fragname id="9c55bf45-1b6b-4298-bf5a-a40fbe5fc503"> and </fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>countEntriesProblemPython</docname>
<fragname id="78b1be41-72df-4e4f-abde-430c7980f84b">id of a user as parameter</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>countEntriesProblemPython</docname>
<fragname id="dac58879-cad0-4a72-84ae-da407a549f58">which takes the </fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>countEntriesProblemPython</docname>
<fragname id="4e3ce72e-1ca3-40e9-9ba5-dbfcf1571d4e">write a function </fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>countEntriesProblemPython</docname>
<fragname id="38c191b6-09db-4c9c-8930-370b48b3d4f2">Your task is to </fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>countEntriesProblemPython</docname>
<fragname id="0ae37ebb-f3a8-4015-ac37-ff2bc97aac55">;</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>countEntriesProblemPython</docname>
<fragname id="55583b14-3498-459d-91b7-0ba878b5fa22">     { &quot;user&quot; : &quot;k342&quot;, &quot;success&quot; : True };</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>countEntriesProblemPython</docname>
<fragname id="a39d08fb-7b0f-4538-be33-e2f1458b6501">;</fragname>
<operation>Insert</operation>
</change>
<change num = "16">
<docname>countEntriesProblemPython</docname>
<fragname id="360649d3-6dab-42f2-bf83-687429694682">.  An example dictionary for a successful entry by the user with id &quot;k342&quot; is:;</fragname>
<operation>Insert</operation>
</change>
<change num = "17">
<docname>countEntriesProblemPython</docname>
<fragname id="6cfccf08-8b6c-452c-be42-6fc87308ddcc">dictionary that has a &quot;user&quot; field, this is the user id of the person who tried to enter, and a &quot;success&quot; field, this is a Boolean indicating whether the attempt to enter was successful or not</fragname>
<operation>Insert</operation>
</change>
<change num = "18">
<docname>countEntriesProblemPython</docname>
<fragname id="c0d12ff9-93bc-4b4c-8460-36743005d394">.  Each entry in this array is a </fragname>
<operation>Insert</operation>
</change>
<change num = "19">
<docname>countEntriesProblemPython</docname>
<fragname id="51371577-6038-4bac-a31b-4a30ca1a6359">attempts</fragname>
<operation>Insert</operation>
</change>
<change num = "20">
<docname>countEntriesProblemPython</docname>
<fragname id="5f9ecedb-bf01-41df-9ac2-b0e11ff8bb7a">The Door Entry problem has been extended.  The system now keeps track of all attempts to access the building, in an array called </fragname>
<operation>Insert</operation>
</change>
<explanation>Here is the problem.  BEFORE PROCEEDING, read it thoroughly all the way through.</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>countEntriesProblemPython</docname>
<fragname id="6a6acb3a-ed51-4fe5-add9-d01209cef01e">a) Write a general specification for the subprogram.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>countEntriesProblemPython</docname>
<fragname id="5255c13b-0ca5-46d7-b34d-559dc5c9aa02">Assume : </fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesProblemPython</docname>
<fragname id="d6325e40-4771-4c81-8246-50536d6318cd">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesProblemPython</docname>
<fragname id="262b19dc-87c8-42d7-b57a-c9037ddcb027">Action  : </fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesProblemPython</docname>
<fragname id="ea207b53-c10f-440a-9700-80bbd7c6ae5a">;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesProblemPython</docname>
<fragname id="e9c0eec5-3491-4848-8b78-10e71b468ece">Return value : </fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>countEntriesProblemPython</docname>
<fragname id="22f1f50d-8523-4ffe-8103-1182b1775cd3">;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>countEntriesProblemPython</docname>
<fragname id="ce33ddcf-0d4b-4865-85a4-1d4c0aac6e19">Parameters : </fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>countEntriesProblemPython</docname>
<fragname id="2cc5bb21-b4f8-4bb6-86d5-4e388754d2cd">;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>countEntriesProblemPython</docname>
<fragname id="441ea585-f828-4216-aae7-b04f96ffe16e">Name  : </fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>countEntriesProblemPython</docname>
<fragname id="0c6e7677-a44e-4590-881f-8a274a8f3c11">;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>countEntriesProblemPython</docname>
<fragname id="3eed24ac-7005-43e5-9e0c-cf1984f577c5">Subprogram : </fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>countEntriesProblemPython</docname>
<fragname id="dd54bb22-5d92-450d-898a-64b3fa100661">;</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>countEntriesProblemPython</docname>
<fragname id="64133529-8151-47cd-b818-1d139a6b5cda">General Spec;</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>countEntriesProblemPython</docname>
<fragname id="c0a9bf7f-bba9-4e6c-8593-8f9f3db6943a">;</fragname>
<operation>Insert</operation>
</change>
<change num = "16">
<docname>countEntriesProblemPython</docname>
<fragname id="8dbeda3d-ef83-4fb0-8bd5-7cc6f0fcc3ae">--------------------------------------------------------------------;</fragname>
<operation>Insert</operation>
</change>
<change num = "17">
<docname>countEntriesProblemPython</docname>
<fragname id="4d68e949-bde6-4502-a2e7-cc1f9736bfb7">;</fragname>
<operation>Insert</operation>
</change>
<explanation>As before, let's work out the specification of the subprogram first.  BEFORE PROCEEDING, write down your best guess for each entry given in the specification...</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>countEntriesProblemPython</docname>
<operation>Ask Answer</operation>
<question num = "3" content="Type in your answers for each part of the spec, separating each with a comma." type="DESCRIPTIVE">
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>countEntriesProblemPython</docname>
<fragname id="0729ee4b-2f76-4e59-8e8b-f92c1456c3ae">the person id - as before, this is a string</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesProblemPython</docname>
<fragname id="e14bf73c-7f90-4aab-94c0-cf10c479376f">returns the number of times that user has successfully entered </fragname>
<operation>Highlight</operation>
</change>
<change num = "3">
<docname>countEntriesProblemPython</docname>
<fragname id="78b1be41-72df-4e4f-abde-430c7980f84b">id of a user as parameter</fragname>
<operation>Highlight</operation>
</change>
<change num = "4">
<docname>countEntriesProblemPython</docname>
<fragname id="4e3ce72e-1ca3-40e9-9ba5-dbfcf1571d4e">write a function </fragname>
<operation>Highlight</operation>
</change>
<change num = "5">
<docname>countEntriesProblemPython</docname>
<fragname id="44fafac2-fe03-456b-b15a-3bd3ed30e85e">all given in the question this time</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesProblemPython</docname>
<fragname id="c2db7f1b-a83f-4c72-a6df-1aa7e2d1285f">search through the attempts array counting occurrences of dictionaries with the supplied user as the user, and noting a successful entry. </fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>countEntriesProblemPython</docname>
<fragname id="753da267-1a0b-4764-9599-dc086a99e7c1">an integer, the count of successful entries for the supplied user</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>countEntriesProblemPython</docname>
<fragname id="aa9acab6-13df-4fe8-82d3-c378cb704795">countEntries</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>countEntriesProblemPython</docname>
<fragname id="05b138cc-9b0d-4e2f-a44d-7a43e8feb116">function</fragname>
<operation>Insert</operation>
</change>
<explanation>So, for the spec: it's a function we want, as indicated in the text, taking one parameter, a user id, and returning an integer, the number of times that user has successfully entered the building.  The action is to search through the attempts array, counting occurrences of successful entries for this user.  Finally, we need make no additional assumptions, everything we need is given in the problem statement.</explanation>
</step>
<step num = "5">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<fragname id="72d2b3e8-a269-415f-8f7b-69dd488976a2">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionPython</docname>
<fragname id="f8e52f30-8a47-4fc8-bd21-9227f90e5863">             { &quot;user&quot; : &quot;a241&quot;, &quot;success&quot; : True } ];</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesSolutionPython</docname>
<fragname id="a8e737f5-79e6-4e90-86f4-044c0b2d1d64">             { &quot;user&quot; : &quot;j123&quot;, &quot;success&quot; : True },;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesSolutionPython</docname>
<fragname id="279ee530-a5da-4635-acd8-39e94706c698">             { &quot;user&quot; : &quot;a241&quot;, &quot;success&quot; : True },;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesSolutionPython</docname>
<fragname id="eefa9fcf-b1b4-43b8-81f8-ec89253059ca">             { &quot;user&quot; : &quot;k754&quot;, &quot;success&quot; : True },;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesSolutionPython</docname>
<fragname id="b766580f-b208-4232-8ac1-afdf5d6dfc8f">             { &quot;user&quot; : &quot;j123&quot;, &quot;success&quot; : False },;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>countEntriesSolutionPython</docname>
<fragname id="4b2744fb-ed22-40d3-a986-ba706825a79f">             { &quot;user&quot; : &quot;a241&quot;, &quot;success&quot; : True },;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>countEntriesSolutionPython</docname>
<fragname id="f143ae92-d7c4-44fe-8dc7-ba5306918187">             { &quot;user&quot; : &quot;x742&quot;, &quot;success&quot; : False },;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>countEntriesSolutionPython</docname>
<fragname id="c4bd5f28-2f29-47f1-8ddc-92a6c601c24d">attempts = [ { &quot;user&quot; : &quot;a241&quot;, &quot;success&quot; : False },;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>countEntriesSolutionPython</docname>
<fragname id="47be811c-5bdb-4445-a04a-8c8fcbd74231"># This is an example array of entry attempts, useful for testing;</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>countEntriesSolutionPython</docname>
<fragname id="fb939432-16d4-49d0-8af8-3889332d0c30">;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>countEntriesProblemPython</docname>
<fragname id="e0427a92-7a7f-406c-afb4-c095183b98f9">b) Write the subprogram itself in Python.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "13">
<docname>countEntriesProblemPython</docname>
<fragname id="4e3ce72e-1ca3-40e9-9ba5-dbfcf1571d4e">write a function </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "14">
<docname>countEntriesProblemPython</docname>
<fragname id="78b1be41-72df-4e4f-abde-430c7980f84b">id of a user as parameter</fragname>
<operation>Unhighlight</operation>
</change>
<change num = "15">
<docname>countEntriesProblemPython</docname>
<fragname id="e14bf73c-7f90-4aab-94c0-cf10c479376f">returns the number of times that user has successfully entered </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "16">
<docname>countEntriesProblemPython</docname>
<fragname id="6a6acb3a-ed51-4fe5-add9-d01209cef01e">a) Write a general specification for the subprogram.;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>That's the spec.  Now to writing the code.  Let's start by creating a sample attempts array - useful for testing our code.</explanation>
</step>
<step num = "6">
<explanation>What results would you expect your function to return if you called it four times with each of the user ids: a241, x742, j123 and k754?  Take a moment to consider this.</explanation>
</step>
<step num = "7">
<explanation>The results would be 3, 0, 1 and 1.  Did you get this?  a241 appears four times in the array, but only three of the entries are successful.  x742 has only one failed attempt.  j123 has two attempts, one successful and one failed.  Finally, k754 has just one successful entry.  So this single array can be used to check many different cases.</explanation>
</step>
<step num = "8">
<explanation>What do you think the function header should be?  Consider this before proceeding.  (You have all the information you need in the specification.)
</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<fragname id="f03c0a13-aa8d-42c8-97f0-bef2353a263f">def countEntries( personId ):;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionPython</docname>
<fragname id="821c9d9e-fe80-4027-b08e-1dd99da47977"># Function to count number of successful entries by the supplied user;</fragname>
<operation>Insert</operation>
</change>
<explanation>There it is.  Now, which of the standard algorithms matches to this problem?</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "10" content="Which of the following standard algorithms matches to this problem?" type="MULTI_CHOICE">
<option num ="0"  content="Find max or min"></option>
<option num ="1"  content="Count occurrences"></option>
<option num ="2"  content="Linear search"></option>
<option num ="3"  content="Input validation"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "11">
<explanation>We asked which standard algorithm is most useful in this problem.  It's count occurrences, as we are looking for how many times a given user has successfully entered, by looking at ALL the attempts to enter - that is, all the entry records in the array &quot;attempts&quot;.</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<fragname id="a751d86d-5765-4cd4-acb7-d172b043694f">    successes = 0;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionPython</docname>
<fragname id="22a955f9-37b3-443c-b355-813a3416962a">;</fragname>
<operation>Insert</operation>
</change>
<explanation>For count occurrences, we are counting up the number of times a situation occurs - in this case, the situation is that the specified user entered successfully.  To keep a running count, we need a variable - so here it is.  The name is chosen for the number of successful entries.</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<fragname id="e71d92a0-a6b9-4200-92d9-aa904441650c">    return successes;</fragname>
<operation>Insert</operation>
</change>
<explanation>The final value in this variable is the value we want to return from the function - so let's add in the return line now
</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "14" content="Now we need to go looking for these occurrences.  How many items in the &quot;attempts&quot; array need to be looked at in order to carry out this count properly?" type="MULTI_CHOICE">
<option num ="0"  content="0"></option>
<option num ="1"  content="1"></option>
<option num ="2"  content="The number of entries in array &quot;attempts&quot;"></option>
<option num ="3"  content="Somewhere in between answers (B) and (C)"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "15">
<explanation>We asked how many items in &quot;attempts&quot; should be examined for count occurrences.  The answer is (C), the number of entries in &quot;attempts&quot; - that is, ALL the items, since any of them could be one of the matches we are looking for.  </explanation>
</step>
<step num = "16">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "16" content="Which is the best kind of loop to use when we are examining ALL the items in a collection, as we are here?" type="MULTI_CHOICE">
<option num ="0"  content="while"></option>
<option num ="1"  content="for"></option>
<option num ="2"  content="&lt;something else&gt;"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<fragname id="ec17d325-99f1-4a53-9960-9866e5d5c546">            ;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionPython</docname>
<fragname id="5b1c6636-b0e0-4424-916b-58d84457a7af">        # Should we count this attempt?;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesSolutionPython</docname>
<fragname id="3c9adc27-1dae-44c7-948d-884b35b65587">    for attempt in attempts:;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesSolutionPython</docname>
<fragname id="120507cc-a322-492d-9bc0-c164c3127819">    # Use typical count occurrences template to count successful entries;</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what kind of loop to use here.  A 'for' loop is the best, as for loops are typically used when we know, at the start of the loop, how many repetitions are required.  In this case, we aim to examine all elements of the array, so we repeat as many times are there are elements in the array.</explanation>
</step>
<step num = "18">
<explanation>The body of the for loop is empty just now - just a comment explains what to do.  To determine whether to count this attempt, which control structure do we need?
</explanation>
</step>
<step num = "19">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "19" content="Which control structure is needed inside the loop?" type="MULTI_CHOICE">
<option num ="0"  content="One-armed selection (e.g. if ... then ...)"></option>
<option num ="1"  content="Two-armed selection (e.g. if ... then ... else ...)"></option>
<option num ="2"  content="Conditional loop (e.g. while)"></option>
<option num ="3"  content="Fixed loop (e.g. for"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "20">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<fragname id="21faa0a1-2210-4e4c-a502-7712823b696e">            successes = successes + 1;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionPython</docname>
<fragname id="21c0a1fc-eb13-4ffc-b4df-c7c0cb7e119d"># Test to decide whether to count this one;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesSolutionPython</docname>
<fragname id="9257f5e2-096e-4eab-9f2a-161a8d7512ee">        if </fragname>
<operation>Insert</operation>
</change>
<explanation>We asked which control structure should be used inside the loop.  It's a one-armed selection - we want to count up this attempt ***if*** it meets the right criteria.
Take a moment to consider what test should be carried out to determine if we should count this attempt.</explanation>
</step>
<step num = "21">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "21" content="What test should we use in the if statement?" type="MULTI_CHOICE">
<option num ="0"  content="attempt[ &quot;user&quot; ] == personId"></option>
<option num ="1"  content="attempt[ &quot;successes&quot; ]"></option>
<option num ="2"  content="attempt[ &quot;user&quot; ] == personId and attempt[ &quot;success&quot; ]"></option>
<option num ="3"  content="attempt[ &quot;user&quot; ] == personId or attempt[ &quot;success&quot; ]"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "22">
<change num = "1">
<docname>countEntriesSolutionPython</docname>
<fragname id="21c0a1fc-eb13-4ffc-b4df-c7c0cb7e119d"># Test to decide whether to count this one;</fragname>
<operation>Delete</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionPython</docname>
<fragname id="34ea7d84-34d9-4a00-90d2-b831c7a18f00">attempt[ &quot;user&quot; ] == personId and attempt[ &quot;success&quot; ]:;</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what the right test was for the if statement.  It was (C) - testing on both the user AND the attempt being a success.

That's all that's needed for this problem.  Check through the code to ensure you understand it thoroughly.</explanation>
</step>
</process>
<process name ="countEntriesHaggis" app = "countEntriesHaggis" processID ="8a1fb093-2b05-4ab6-99ae-6679776fc025">
<step num = "1">
<change num = "1">
<docname>countEntriesProblemHaggis</docname>
<fragname id="159985c6-b161-4fd7-a3db-8021aa78ecb9">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesProblemHaggis</docname>
<fragname id="87c399ab-bb23-47c1-8148-28fa0f3cccbb">b) Write the subprogram itself in Python.;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesProblemHaggis</docname>
<fragname id="d1fb58bc-ca33-483f-bf2d-b2bc22f6063f">a) Write a general specification for the subprogram.;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesProblemHaggis</docname>
<fragname id="46a15e3b-203e-4a2c-bc9e-4241f6cb3f90">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesProblemHaggis</docname>
<fragname id="b6a42451-41bb-4f5e-b7b7-a0d6e8507210">Once again, you should:;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesProblemHaggis</docname>
<fragname id="803ace06-821a-4d57-a5da-a6787bb28ece">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>countEntriesProblemHaggis</docname>
<fragname id="8f682f13-1269-4e69-88ae-8a6c044981c6">the building.;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>countEntriesProblemHaggis</docname>
<fragname id="5f90a96b-8504-401a-8639-d816e8102129">returns the number of times that user has successfully entered </fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>countEntriesProblemHaggis</docname>
<fragname id="a73d1e7d-d15b-4d26-ab42-d0d36db0992d"> and </fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>countEntriesProblemHaggis</docname>
<fragname id="d2329d74-46ff-42ab-b2d7-c080cd562952">id of a user as parameter</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>countEntriesProblemHaggis</docname>
<fragname id="bb08fc3f-2242-4355-9ae5-02bc06f718cd">which takes the </fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>countEntriesProblemHaggis</docname>
<fragname id="4ea87e0b-8441-481f-b430-59d9688b92fa">write a function </fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>countEntriesProblemHaggis</docname>
<fragname id="ace1aa1f-d704-4a08-a76f-8e0bd8f21e79">Your task is to </fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>countEntriesProblemHaggis</docname>
<fragname id="c0752815-8c18-4fb2-97bc-85f57cdd15e9">;</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>countEntriesProblemHaggis</docname>
<fragname id="5c30f968-e962-4088-bfa9-2847fdbd3e41">     RECORD Attempt IS { STRING user, BOOLEAN success };</fragname>
<operation>Insert</operation>
</change>
<change num = "16">
<docname>countEntriesProblemHaggis</docname>
<fragname id="c504a458-b42e-4769-9cc7-a16483e887f0">;</fragname>
<operation>Insert</operation>
</change>
<change num = "17">
<docname>countEntriesProblemHaggis</docname>
<fragname id="4c5aad49-70b3-4dae-92eb-115b74f18265">.  The record type is defined as follows:;</fragname>
<operation>Insert</operation>
</change>
<change num = "18">
<docname>countEntriesProblemHaggis</docname>
<fragname id="f731a14d-3ece-43ba-a75e-a489741c4fe1">value of a record type that has a &quot;user&quot; field, this is the user id of the person who tried to enter, and a &quot;success&quot; field, this is a Boolean indicating whether the attempt to enter was successful or not</fragname>
<operation>Insert</operation>
</change>
<change num = "19">
<docname>countEntriesProblemHaggis</docname>
<fragname id="4b481b7c-238c-4dfd-acff-52a5fe76d51d">.  Each entry in this array is a </fragname>
<operation>Insert</operation>
</change>
<change num = "20">
<docname>countEntriesProblemHaggis</docname>
<fragname id="1f1b5f4c-0df2-4f99-afbc-26942b2bd1ac">array called attempts</fragname>
<operation>Insert</operation>
</change>
<change num = "21">
<docname>countEntriesProblemHaggis</docname>
<fragname id="c96e6624-139f-4101-979f-06ab1d6848df">The Door Entry problem has been extended.  The system now keeps track of all attempts to access the building, in an </fragname>
<operation>Insert</operation>
</change>
<explanation>This is the problem.  BEFORE PROCEEDING, read the problem thoroughly all the way through.</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>countEntriesProblemHaggis</docname>
<fragname id="b3790e31-f714-483e-8dcb-3ed2fb0a6dfe">Assume : </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesProblemHaggis</docname>
<fragname id="95e2d42d-b28b-44c9-87f4-e8a91f6fc31f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesProblemHaggis</docname>
<fragname id="81031dfc-fa2a-4cf6-af28-18c234360303">Action  : </fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesProblemHaggis</docname>
<fragname id="76477321-d3ca-496b-8720-9c2143cc342e">;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesProblemHaggis</docname>
<fragname id="8a7c74ee-bb9e-4c60-86b3-307f54dd49f3">Return value : </fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesProblemHaggis</docname>
<fragname id="0dc7df4d-3f63-47f7-8f97-21f914f39d65">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>countEntriesProblemHaggis</docname>
<fragname id="f6f5510f-4fc9-4105-b9d9-ddbe01d48e5f">Parameters : </fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>countEntriesProblemHaggis</docname>
<fragname id="1cbd0d28-3659-44f2-a302-9037016fb23e">;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>countEntriesProblemHaggis</docname>
<fragname id="4ea9be10-be6b-4ad6-80ae-2794e7822c41">Name  : </fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>countEntriesProblemHaggis</docname>
<fragname id="e71c6e84-ba07-4bf7-b92b-a55aedb36f03">;</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>countEntriesProblemHaggis</docname>
<fragname id="9ec143ea-2964-48b6-b4bc-8aa2905df4b0">Subprogram : </fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>countEntriesProblemHaggis</docname>
<fragname id="23bf2c5b-ba86-4a23-be17-060c3eb2e9a5">;</fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>countEntriesProblemHaggis</docname>
<fragname id="af771764-6e4c-4dee-ace2-d59ac2920992">General Spec;</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>countEntriesProblemHaggis</docname>
<fragname id="cd1ba3f2-29ab-415c-b528-e87a1f46e628">;</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>countEntriesProblemHaggis</docname>
<fragname id="73182dd5-33a7-49d4-90ef-9b51aafd7a0d">--------------------------------------------------------------------;</fragname>
<operation>Insert</operation>
</change>
<explanation>As before, let's work out the specification of the subprogram first.  BEFORE PROCEEDING, consider your best guess for each entry given in the specification... (you'll be asked to type this in on the next step)</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>countEntriesProblemHaggis</docname>
<operation>Ask Answer</operation>
<question num = "3" content="Type in your answers for each part of the specification, separating each with commas." type="DESCRIPTIVE">
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>countEntriesProblemHaggis</docname>
<fragname id="f6a4c303-dd73-44a3-9c9d-b0dd55dab5cf">the person id - as before, this is a string</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesProblemHaggis</docname>
<fragname id="0c2008a4-5e22-4503-872f-dc7a138033c8">all given in the question this time;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesProblemHaggis</docname>
<fragname id="74ae9308-bd6b-4122-bb63-ccb69b7e92d8">search through the attempts array counting occurrences of dictionaries with the supplied user as the user, and noting a successful entry. </fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesProblemHaggis</docname>
<fragname id="6a52cc0e-7ee2-4429-bf1f-5a70dbb67fe0">an integer, the count of successful entries for the supplied user</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesProblemHaggis</docname>
<fragname id="6da00fc3-ab8d-4bc5-9a12-df804ad38a21">countEntries</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesProblemHaggis</docname>
<fragname id="c6bb7b8d-cbd3-455c-b508-272c06579e83">function</fragname>
<operation>Insert</operation>
</change>
<explanation>So, for the spec: it's a function we want, as indicated in the text, taking one parameter, a user id of type string, and returning an integer, the number of times that user has successfully entered the building.  The action is to search through the attempts array, counting occurrences of successful entries for this user.  Finally, we need make no additional assumptions, as it's all been given in the question.</explanation>
</step>
<step num = "5">
<change num = "1">
<docname>countEntriesProblemHaggis</docname>
<fragname id="1f1b5f4c-0df2-4f99-afbc-26942b2bd1ac">array called attempts</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="c7a196e1-a2fe-4772-978b-68fde1841065">    Attempt( &quot;a241&quot;, true ) ];</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="cd15ab12-6cba-4c4f-910d-80712d2d0a9b">    Attempt( &quot;j123&quot;, true ),;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="f51b8d33-620a-43cf-8e22-acd55066125e">    Attempt( &quot;a241&quot;, true ),;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="4b9a3424-4768-4abc-b8d7-a0a749b4a6c5">    Attempt( &quot;k754&quot;, true ),;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="7ad321de-5e86-4eb4-99a6-ef1a197fe501">    Attempt( &quot;j123&quot;, false ),;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="40f541e6-7e87-44d3-865d-e0a4fe6a70f0">    Attempt( &quot;a241&quot;, true ),;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="38585852-d6ec-4a68-9b7b-371d8eee72aa">    Attempt( &quot;x742&quot;, false ),;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="d7ff6d77-8330-445d-963e-f342bf2a4880">    Attempt( &quot;a241&quot;, false ),;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="a360140e-da1e-4060-a559-05f01b0fb853">SET attempts TO [ ;</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="18fc4ad2-4656-44e7-84a2-6afc753ed921"># This is an example array of entry attempts, useful for testing;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="5d08c43a-c4b9-4257-a6c9-94c5a378b323">;</fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="52813565-e121-4fa6-a1f9-faf937b9b9f1">RECORD Attempt IS { STRING user, BOOLEAN success };</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="d41568d7-8d46-4db4-8604-56f825f6fd68">;</fragname>
<operation>Insert</operation>
</change>
<explanation>That's the spec.  Now to writing the code.  Let's start by creating a sample attempts array - useful for testing our code.  The record type definition has been included too for completeness.</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>countEntriesProblemHaggis</docname>
<fragname id="1f1b5f4c-0df2-4f99-afbc-26942b2bd1ac">array called attempts</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>If the array &quot;attempts&quot; contained these values, what results would you expect your function to return if you called it four times with each of the user ids: a241, x742, j123 and k754?  Take a moment to consider this.</explanation>
</step>
<step num = "7">
<explanation>The results would be 3, 0, 1 and 1.  Did you get this?  a241 appears four times in the array, but only three of the entries are successful.  x742 has only one failed attempt.  j123 has two attempts, one successful and one failed.  Finally, k754 has just one successful entry.  So this single array can be used to check many different cases.</explanation>
</step>
<step num = "8">
<explanation>What do you think the function header should be?  Consider this before proceeding.  (You have all the information you need in the specification.)</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="4e4d6bf3-3ba7-4d30-ba5a-36d1cb4d1289">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="b118a84b-0f0c-438e-876a-13c1d8874164">END FUNCTION;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="3b92b908-1fa9-4776-8338-16529b01c8cc">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="bb3cf5ae-3335-4a17-ab66-ba5b6622f461">FUNCTION countEntries( STRING personId ) RETURNS INTEGER;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="ee087544-c91f-4b0c-98b8-0f2493ba8760"># Function to count number of successful entries by the supplied user;</fragname>
<operation>Insert</operation>
</change>
<explanation>There it is.  Now, which of the standard algorithms matches to this problem?
</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>countEntriesProblemHaggis</docname>
<operation>Ask Answer</operation>
<question num = "10" content="Which of the following standard algorithms matches to this problem?" type="MULTI_CHOICE">
<option num ="0"  content="Find max or min"></option>
<option num ="1"  content="Count occurrences"></option>
<option num ="2"  content="Linear search"></option>
<option num ="3"  content="Input validation"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "11">
<explanation>We asked which standard algorithm is most useful in this problem.  It's count occurrences, as we are looking for how many times a given user has successfully entered the building, by looking at ALL entry records in &quot;attempts&quot;.
</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="4cb78b18-42a6-4b6a-b042-135c9b9f9284">    SET successes TO 0;</fragname>
<operation>Insert</operation>
</change>
<explanation>For count occurrences, we are counting up the number of times a situation occurs - in this case, the situation is that &quot;the specified user entered successfully&quot;.  To keep a running count, we need a variable - so here it is.  The name is chosen for the number of successful entries.</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="073045a9-b2b0-42bb-b825-dea76b225287">    RETURN successes;</fragname>
<operation>Insert</operation>
</change>
<explanation>The final value in this variable is the value we want to return from the function - so let's add in the return line now
</explanation>
</step>
<step num = "14">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "14" content="Now we need to go looking for these occurrences.  How many items in the &quot;attempts&quot; array need to be looked at in order to carry out this count properly?" type="MULTI_CHOICE">
<option num ="0"  content="0"></option>
<option num ="1"  content="1"></option>
<option num ="2"  content="The number of entries in the array &quot;attempts&quot;"></option>
<option num ="3"  content="Somewhere in between answers (B) and (C)"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "15">
<explanation>We asked how many items in &quot;attempts&quot; should be examined for count occurrences.  The answer is (C), the number of entries in &quot;attempts&quot; - that is, ALL the items, since any of them could be one of the matches we are looking for.  </explanation>
</step>
<step num = "16">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "16" content="Which is the best kind of loop to use when we are examining ALL items in a collection, as we are here?" type="MULTI_CHOICE">
<option num ="0"  content="conditional loop - e.g. while"></option>
<option num ="1"  content="fixed loop - e.g. for"></option>
<option num ="2"  content="something else"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="bf5d61ef-6b83-469b-b213-434202b3d7fe">        &lt;Count this attempt if appropriate&gt;;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="c6d5e155-e969-4f1f-82f9-d8515303d8db">            ;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="8c124517-0547-407e-9054-c594157ce171">    END FOR EACH;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="78d7e84e-de8b-4660-aa85-1e7c4e27007e">    FOR EACH attempt FROM attempts DO;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="bf1f9405-1b53-4bba-8809-ffc433433e3a">    # Use typical count occurrences template to count successful entries;</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what kind of loop to use here.  A 'for' loop is the best, as for loops are typically used when we know, at the start of the loop, how many repetitions are required.  In this case, we aim to examine all elements of the array, so we repeat as many times are there are elements in the array.  We use the FOR EACH command in Haggis for this - the name &quot;attempt&quot; holds a different value from the array &quot;attempts&quot; on each time around the loop.</explanation>
</step>
<step num = "18">
<explanation>The body of the for loop is empty just now - just a Haggis elision explaining that we need to decide whether to count this attempt or not.  To determine whether to count the attempt, which control structure do we need?</explanation>
</step>
<step num = "19">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "19" content="Which control structure is needed?" type="MULTI_CHOICE">
<option num ="0"  content="Simple selection (e.g. if ... then ...)"></option>
<option num ="1"  content="Complex selection (e.g. if ... then ... else )"></option>
<option num ="2"  content="Conditional loop (e.g. while )"></option>
<option num ="3"  content="Fixed loop (e.g. for )"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "20">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="bf5d61ef-6b83-469b-b213-434202b3d7fe">        &lt;Count this attempt if appropriate&gt;;</fragname>
<operation>Delete</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="0402b408-716c-436f-9548-ac656eb4b41d">        END IF;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="8b8a788e-7b50-4d0c-95ec-eebf2306d884">            SET successes TO successes + 1;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="87ea5b21-1c70-446a-ae41-9f14804fe71e">THEN;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="c9f72a11-161a-4e12-85e6-a201d7b7d958">&lt;Test to decide whether to count this one&gt; </fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="8dd3a4b4-d56f-4fe2-a4f1-e9fff1f63f4c">        IF </fragname>
<operation>Insert</operation>
</change>
<explanation>We asked which control structure should be used inside the loop.  It's a simple selection - we want to count up this attempt ***if*** it meets the right criteria and do nothing if it doesn't.
Take a moment to consider what test should be carried out to determine if we should count this attempt.</explanation>
</step>
<step num = "21">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<operation>Ask Answer</operation>
<question num = "21" content="What test should we use in the if statement?" type="MULTI_CHOICE">
<option num ="0"  content="attempt.user == personId"></option>
<option num ="1"  content="attempt.success"></option>
<option num ="2"  content="attempt.user == personId AND attempt.success"></option>
<option num ="3"  content="attempt.user == personId OR attempt.success"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "22">
<change num = "1">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="8fe25c71-5ca2-4be5-8ab0-aae1b720e5cf">attempt.user = personId AND attempt.success </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>countEntriesSolutionHaggis</docname>
<fragname id="c9f72a11-161a-4e12-85e6-a201d7b7d958">&lt;Test to decide whether to count this one&gt; </fragname>
<operation>Delete</operation>
</change>
<explanation>We asked what the right test was for the if statement.  It was (C) - testing on both the user AND the attempt being a success.

That's all that's needed for this problem.  Check through the code to ensure you understand it thoroughly.</explanation>
</step>
</process>
<process name ="mostFrequentVisitorPython" app = "mostFrequentVisitorPython" processID ="d7354e7a-6b3a-4735-8d95-b7b2b7c90d7d">
<step num = "1">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="17c4af47-2b1e-4dc9-b43c-f7eb826f9aec">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="df645062-3c21-4308-b06f-c02de8efda1d">As before, first write the specification of the subprogram, and then the subprogram itself.;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="4ae21ce3-874c-467d-8e7b-a4a39d76a182">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="ceaab970-c780-42e9-9415-a38347e4bbbe">You can assume you have access to both the authUsers and attempts arrays from the earlier worked examples, as global variables, and also the countEntries function.;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="13718724-8bba-4fb2-895c-5ffd9cf6048e">;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="eae5a87d-03ee-49f5-bfd4-fbf3762b527e">calculates which user is the most frequent visitor.  ;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="be7467d2-cc46-4ee6-a392-c7c231a26031">You are to write a subprogram that </fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="0fd03b8e-35f0-4e32-a711-668a7f16d274">The management team for the building is keen to find out which authorised user has entered the building most often.  </fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="48274efc-fac4-45f7-9895-df667b08c844">;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="7b2773cd-541c-422f-8a28-6bc60d36a41d">(It is assumed that the earlier doorEntry and countEntries worked examples have already been reviewed, as this example further extends the door entry system.);</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="77ce9dc0-548c-4228-9ac6-db04f7fe34ef">;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="639c67de-722a-41f1-b845-475ac40d73c9">Finding the top visitor to the building;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here is the problem.  Note, it is assumed you've already looked at the two related problems, LinearSearchDoorEntry and then countEntries.  BEFORE CONTINUING, read through the problem.  REMEMBER, (A) the point of a worked example is to understand WHY a particular decision was made, so be sure to read every explanation, and (B) you will learn the most if you try to answer all questions presented - forcing your brain into the gym for a workout!</explanation>
</step>
<step num = "2">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="493f56e4-a392-4e6b-a33c-0f5d9cfb83e3">Action  : </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="c0dffc19-ddf5-45ee-9fea-db2d9a275c8a">Assume : ;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="1877cc8b-c522-4489-823e-77559d41993e">Return value : </fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="f392dd1d-13b6-407f-abd9-2aa1f2c8014b">Parameters : </fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="974967db-80f3-498b-a8ca-2246c526ef87">Name  : </fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="f707c1cf-dbc2-49c1-beb9-3a92269bfeca">Subprogram : </fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="5ac82765-ce11-4062-b092-4344908e67ee">;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="8071766d-c165-4cd7-a887-09cb27d157db">;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="88ea6913-e5ed-469a-89d5-de443a2caeb1">;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="fd4f3864-fa34-459a-8622-cbd688353a0e">;</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="b86c9d40-e881-4762-b94b-e4987ba86459">;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="d89c918d-c29e-4ec2-bcd8-ec92537494b9">;</fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="050a4801-856d-41fd-b6b4-2c55e015af3d">;</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="a76b7854-0fb5-401e-9641-6edf1c34c8e5">General Spec;</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="e9b1e467-eba4-43be-bb0b-2d123be9f667">;</fragname>
<operation>Insert</operation>
</change>
<change num = "16">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="55a74715-caf7-4854-ace9-b29b113b5782">-------------------------------------------------------------------;</fragname>
<operation>Insert</operation>
</change>
<explanation>Let's start by completing the specification.  The problem doesn't indicate what kind of subprogram is required this time.  Which is it?
</explanation>
</step>
<step num = "3">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="be7467d2-cc46-4ee6-a392-c7c231a26031">You are to write a subprogram that </fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<operation>Ask Answer</operation>
<question num = "3" content="What kind of subprogram is required?" type="MULTI_CHOICE">
<option num ="0"  content="procedure"></option>
<option num ="1"  content="function"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "4">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="eae5a87d-03ee-49f5-bfd4-fbf3762b527e">calculates which user is the most frequent visitor.  ;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="be7467d2-cc46-4ee6-a392-c7c231a26031">You are to write a subprogram that </fragname>
<operation>Unhighlight</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="6bdf1068-1a71-4c84-afa4-5d11f08f9557">function</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="f758263d-d784-43d9-97c1-e0fbf8c9e4a0">(1) We should return the most frequent visitor. ;</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked which kind of subprogram is needed.  It's a function, because it calculates something.  The problem doesn't specifically say that it returns the result of the calculation, but we can assume this - there's not much point to the subprogram otherwise!  Let's add this assumption to our list of assumptions.</explanation>
</step>
<step num = "5">
<explanation>What would be a good name for the function, how many parameters does it take, and what exactly it is returning?  Consider this before continuing
</explanation>
</step>
<step num = "6">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="ceaab970-c780-42e9-9415-a38347e4bbbe">You can assume you have access to both the authUsers and attempts arrays from the earlier worked examples, as global variables, and also the countEntries function.;</fragname>
<operation>Highlight</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="3d99eb20-2af1-4b91-9fbc-1723343ee5b8">a string, the id of the user who has visited most often</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="a8321fe6-33e1-4ee5-8d25-6ce6b722de77">no parameters</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="64f33fb9-b75d-4277-9159-c73ff0c27d15">mostFrequentVisitor</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="eae5a87d-03ee-49f5-bfd4-fbf3762b527e">calculates which user is the most frequent visitor.  ;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>We're to find the user who has visited most - so mostFrequentVisitor is ok as the name.  The problem indicates that we have the authorised user array and the entry attempts array available to us as global variables.  Is there anything else we need to calculate the most frequent visitor?  No - and so there are no parameters needed.  We are returning the user who visits most often - we don't have a name, only user ids, so that is what we will return - and this is a string.</explanation>
</step>
<step num = "7">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="ceaab970-c780-42e9-9415-a38347e4bbbe">You can assume you have access to both the authUsers and attempts arrays from the earlier worked examples, as global variables, and also the countEntries function.;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>Let's consider the action now - this will take a few steps.  Below the problem and the spec, we will write down a few notes about what we know and what we can work out about the problem.</explanation>
</step>
<step num = "8">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="4aa3fd11-6b59-4c30-8c71-a232270a722a">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="5d64adc0-a9bf-49d3-b764-4b87104a53b8">Doodling about this problem - the &quot;thinking it through&quot; phase;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="fb4f7997-f78c-4400-8419-819dee6611f3">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="ab695811-2d50-42ee-8d77-bcba0c60bb32">-------------------------------------------------------------------;</fragname>
<operation>Insert</operation>
</change>
<explanation>Before going ahead, consider yourself how you could calculate which user visits most often, given you have access to the authorised user array, the attempts array, and the countEntries function.</explanation>
</step>
<step num = "9">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="639518eb-9953-4e92-96d0-23838e28ce96">(2) Users are not deleted from the authUsers array once added.;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="2e65dd5f-4f3b-482f-ad77-aaea51e44535">B.  The visitor, by definition, must be in the authorised users array (assuming users are not deleted from this list - add that to the assumptions!), otherwise he/she wouldn't be able to visit at all!;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="823e94a9-58b6-465f-857e-78fcc574373e">A.  We are looking for the most frequent visitor;</fragname>
<operation>Insert</operation>
</change>
<explanation>These first two points are important, as they show that the authUsers array is important us - it is only these users we need to consider.  
Note how we sometimes need to add to our assumptions list as we are working on the problem.</explanation>
</step>
<step num = "10">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="eacee157-d1b0-4b6e-9588-1a85399cd569">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="506b0bf0-0302-4ab5-b18c-075c7b2fe22f">D.  Our job is to find which of these counts is the largest.;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="f8ed9c03-db81-4ba4-97d5-0c5c0d1e714a">C.  So, for each user in the authUsers array, we can count up how many times they've entered, using the countEntries function from the early worked example.;</fragname>
<operation>Insert</operation>
</change>
<explanation>The second two points constitute the real work we must do - calculate how many times each different user has entered, and then find the largest count.  Let's present this work as a ***plan*** - a definite sequence of steps.</explanation>
</step>
<step num = "11">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="677756d9-3082-4a28-9fca-03852025a7cb">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="c7b4f31e-2be5-4f24-af6c-2ec37296d176">2. Find the maximum value in the entry count array, and the user who 'generated' it;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="dda74733-7975-4514-9df9-016b7524b16f">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="4d493e04-69a7-4cba-bb9a-cfb12d4379c1">1. Calculate an entry count for each authorised user</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="9f2cb46e-059c-4b5a-b59d-8f5799c64880">PLAN;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here is a first plan - simply taking the two parts of the work we've described and putting one after the other.  Read the steps now.  Does the plan say what we will do with the entry counts as we calculate them?
</explanation>
</step>
<step num = "12">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="88379e9c-54d9-45e2-953c-dc3f4acfd221">, storing these in an array</fragname>
<operation>Insert</operation>
</change>
<explanation>No, it doesn't.  We could store them in an array as we create them.  Let's add this aspect to the plan.</explanation>
</step>
<step num = "13">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="f17dd93f-3cab-4f7d-99b0-365d7126fddf">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="164cd291-0c57-4fcf-8da2-228a70b60c2f">    return successes;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="f7cff453-01b7-46ec-a65a-6172ebca922e">            ;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="811ed115-0a1a-4e39-8c88-950b12b36915">            successes = successes + 1;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="5e54b859-c512-42d5-b67b-8f14ec4e10f2">        if attempt[ &quot;user&quot; ] == personId and attempt[ &quot;success&quot; ]:;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="5bddd016-bafa-45f1-9c4c-1625b2091c0d">    for attempt in attempts:;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="800b3a4f-051f-4635-9a8d-9047c43a5257">    # Use typical count occurrences template to count successful entries;</fragname>
<operation>Insert</operation>
</change>
<change num = "8">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="5b44e215-8a8e-4050-92cb-2c709faabad9">;</fragname>
<operation>Insert</operation>
</change>
<change num = "9">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="ab2b6490-a7d5-4cf4-abd2-32225b1e7a24">    successes = 0;</fragname>
<operation>Insert</operation>
</change>
<change num = "10">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="f629e021-f710-475e-9659-4fa51f076b89">def countEntries( personId ):;</fragname>
<operation>Insert</operation>
</change>
<change num = "11">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="4b02d170-8f54-4f51-8933-7256128beb45"># Function to determine if supplied user is authorised to enter;</fragname>
<operation>Insert</operation>
</change>
<change num = "12">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="c14efba9-ec9f-493a-b805-5af6dd116173">;</fragname>
<operation>Insert</operation>
</change>
<change num = "13">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="22afafc6-cf15-41e5-812d-c7c1b3de0f5c">             { &quot;user&quot; : &quot;a241&quot;, &quot;success&quot; : True } ];</fragname>
<operation>Insert</operation>
</change>
<change num = "14">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="7cc486d5-201f-4e4b-a68d-6e8b0d6baade">             { &quot;user&quot; : &quot;j123&quot;, &quot;success&quot; : True },;</fragname>
<operation>Insert</operation>
</change>
<change num = "15">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="ad6efbee-eb27-4c00-abf3-ae544dba62b4">             { &quot;user&quot; : &quot;a241&quot;, &quot;success&quot; : True },;</fragname>
<operation>Insert</operation>
</change>
<change num = "16">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="f85ec26d-1741-4bdf-886b-b3179f241c8c">             { &quot;user&quot; : &quot;k754&quot;, &quot;success&quot; : True },;</fragname>
<operation>Insert</operation>
</change>
<change num = "17">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="1a1f369a-6b87-46c9-9c2a-6709df5b79fb">             { &quot;user&quot; : &quot;j123&quot;, &quot;success&quot; : False },;</fragname>
<operation>Insert</operation>
</change>
<change num = "18">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="f5934b1a-172f-4c11-83d8-83a0ad3e9a50">             { &quot;user&quot; : &quot;a241&quot;, &quot;success&quot; : True },;</fragname>
<operation>Insert</operation>
</change>
<change num = "19">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="7df98f98-e23b-422e-806a-0551b4647893">             { &quot;user&quot; : &quot;x742&quot;, &quot;success&quot; : False },;</fragname>
<operation>Insert</operation>
</change>
<change num = "20">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="c5d43c97-7419-40e1-8814-06398dac1d6a">attempts = [ { &quot;user&quot; : &quot;a241&quot;, &quot;success&quot; : False },;</fragname>
<operation>Insert</operation>
</change>
<change num = "21">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="33154fb7-677d-4df5-adc7-449b41521781"># This is an example array of entry attempts;</fragname>
<operation>Insert</operation>
</change>
<change num = "22">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="2082d230-87be-4c1f-8bfb-1aa83cc9c415">;</fragname>
<operation>Insert</operation>
</change>
<change num = "23">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="25814a54-dcbe-46f2-9cc4-35e3b8edf10e">authUsers = [ &quot;a241&quot;, &quot;z742&quot;, &quot;j123&quot;, &quot;k754&quot;];</fragname>
<operation>Insert</operation>
</change>
<change num = "24">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="be09cf25-f9b3-404a-8223-c1fcb4846671"># This is an example array of ids for authorised users;</fragname>
<operation>Insert</operation>
</change>
<change num = "25">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="3e7bdd2e-d13a-40cb-a6f2-d14e0637ba4c">;</fragname>
<operation>Insert</operation>
</change>
<change num = "26">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="b1208e34-ac77-4cb4-b74d-0bba31bef44d"># Program to determine the most frequent visitor to the building;</fragname>
<operation>Insert</operation>
</change>
<explanation>Ok, we now have a starting point - it's a simple plan, but it will help to structure our program into two distinct phases.  Let's start the program.  First, we have the parts from the earlier worked examples - just copying these over.</explanation>
</step>
<step num = "14">
<explanation>Let's put in the framework for the function - what do you think it should look like?  The detail in the specification will help...</explanation>
</step>
<step num = "15">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="185c1c4a-65d4-4087-96e7-24cb112bd6f8">    return </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="0f11358d-ca24-4b12-a9c1-abf14af74cb6">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="e8b5192d-0cac-4517-ab6e-fd6dea3349b9">;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="5fbba032-a9b0-4622-880e-97984f0b1663">???</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="59abdeb9-1903-4e08-a37f-d552707aa79a">;</fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="9772a050-4722-4a47-9669-8eac30b6d6ba">def mostFrequentVisitor():;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="9b3c18da-5800-4409-b040-4cb452dafe01"># Function to find the most frequent authorised visitor;</fragname>
<operation>Insert</operation>
</change>
<explanation>Here it is.  We don't know exactly what we'll be returning yet, so this is left as ???, but it is helpful to have the full structure in - easy to forget the return statement later on</explanation>
</step>
<step num = "16">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="f2903144-7d57-4088-b1d2-087c6bfaa11a">    # 2. Find the maximum value in the entry count array, and the user who 'generated' it;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="b8f9108e-e422-40da-8196-59284f5fbfb9">;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="130b55fd-4ea2-4938-9216-d79433494692">    # 1. Calculate an entry count for each authorised user, storing these in an array;</fragname>
<operation>Insert</operation>
</change>
<explanation>Let's also put in two comments, one for each of the plan lines.  This helps us to structure the code correctly.</explanation>
</step>
<step num = "17">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="641b1988-7418-438d-b1ea-53c609bd5ff9">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="390f7f99-faba-41f1-a1ea-59ae0b0544da">    visitCounts = [];</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="55618605-cf63-4af8-9fed-448f6e57b6fe">    # Create a list of counts of visits for each user;</fragname>
<operation>Insert</operation>
</change>
<explanation>Considering the first step, we can scan over the array of authorised users, calling countEntries on each user, and storing the result in a new array.  Let's create that array first.</explanation>
</step>
<step num = "18">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "18" content="Ok, so, to scan over the array of authorised users, we use a loop.  What kind should we use?" type="MULTI_CHOICE">
<option num ="0"  content="for"></option>
<option num ="1"  content="while"></option>
</question>
</change>
<change num = "2">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="47e7717f-3431-4f32-af66-81f7f7fb10dc">    # storing the visit count for each user;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="be5d732e-88a8-4b4c-a799-18c488b5e585">    # Now scan the authorised user list, calculating and;</fragname>
<operation>Insert</operation>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "19">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="cb5eba5d-f1a9-4aa8-89f6-3d8cc08c01ac">    for user in authUsers:;</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what kind of loop to use.  It's a for loop - since we are working over the whole collection of authorised users - we want to calculate an entry count for every one of them.</explanation>
</step>
<step num = "20">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="eda05d1a-c3f9-46d6-9b15-6e52f7e0f040">        userCount = </fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="2a1dc14c-8a44-40e6-ac13-da020fab03cd">;</fragname>
<operation>Insert</operation>
</change>
<explanation>Now to calculate the entry count for this user, storing it in the variable userCount, making use of the countEntries function.
</explanation>
</step>
<step num = "21">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "21" content="How do we correctly calculate the entry count for this user, given you can use the countEntries function? " type="MULTI_CHOICE">
<option num ="0"  content="countEntries( thisUser )"></option>
<option num ="1"  content="countEntries( authUsers )"></option>
<option num ="2"  content="countEntries()"></option>
<option num ="3"  content="countEntries( user )"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "22">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="1688be04-9a01-4db5-ba57-d89b48bbdc4d">countEntries( user )</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked how to correctly calculate the entry count.  Well, it's a call to the function countEntries.  The function takes one parameter, the id of a user.  On each loop of the for loop, a different user from the authUser array is placed into the &quot;user&quot; variable - and so it is this variable that we put in as the actual parameter in the call to countEntries.</explanation>
</step>
<step num = "23">
<explanation>We now want to store this value in the visitCounts array.  Consider how to do this for a moment...</explanation>
</step>
<step num = "24">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="78ce74f8-5eaf-46f9-8260-a45c15652fcb">        visitCounts = visitCounts + [ userCount ];</fragname>
<operation>Insert</operation>
</change>
<explanation>We add it as a new array element, onto the end of the existing array.
</explanation>
</step>
<step num = "25">
<explanation>FIND MAX VALUE OR POSITION OF MAX VALUE?
So now to find the user with the largest entry count.  This is a &quot;find maximum value in array&quot; situation.
With a find maximum, we should always consider whether we need:
 a. the maximum value, or 
 b. the position in the array of the maximum value.  
Bearing in mind that we are looking for the user id of the user with the maximum entry count, which do you think it is here?
</explanation>
</step>
<step num = "26">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "26" content="Do we want the maximum value itself, or the position of this value in the array?" type="MULTI_CHOICE">
<option num ="0"  content="maximum value"></option>
<option num ="1"  content="position of maximum value in array"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "27">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="4357bd0a-4f40-4897-ab6c-9eaabc1a97c6">;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="236bb5c3-0120-45a2-a196-869644487674">- the array of entry counts;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="7946945a-59ca-4cac-ab00-2952f6a6a0dc">- the authorised user array;</fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="19eb50ac-8ee1-4056-a505-1b593c5015d1">We have two arrays now:;</fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="0b6ddcd3-6584-4d5e-ba3d-6a55fcd49290">Necessary insight:;</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked whether we needed the maximum value, or its position in the array.  Ultimately, we want the user id of the user who entered the building the most times.  The insight required here is one of those things we might doodle down as we are planning - take a look over in the problem/specification frame, and then answer the next question.</explanation>
</step>
<step num = "28">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<operation>Ask Answer</operation>
<question num = "28" content="What is the most important relationship between these two arrays? " type="MULTI_CHOICE">
<option num ="0"  content="They are both the same length"></option>
<option num ="1"  content="They both contain information about authorised users"></option>
<option num ="2"  content="Corresponding values in each array hold information about the same user"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "29">
<change num = "1">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="14b44279-b6b8-4e60-a038-de17659826e8">to get the corresponding user.;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="6ce4566d-f229-4d20-a4c0-b74d7acbfd73">same position </fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="f8ea4dac-5c05-4836-a25e-b37659efca7e">of the largest entry count in visitCounts, we can use that </fragname>
<operation>Insert</operation>
</change>
<change num = "4">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="abdc7d0a-e670-4d5e-805b-f93255a960cc">position </fragname>
<operation>Insert</operation>
</change>
<change num = "5">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="be1780e9-9f6e-4fbe-b4b9-c6c9fb995bc3">So, if we find the </fragname>
<operation>Insert</operation>
</change>
<change num = "6">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="faa36424-2d60-4276-962b-527b4a6cf7d3">;</fragname>
<operation>Insert</operation>
</change>
<change num = "7">
<docname>mostFrequentVisitorProblemSpecDoodles</docname>
<fragname id="e59292e8-114c-40bf-8e2c-973f3e49ad95">Corresponding pairs of elements (e.g. element zero in each array) hold information about the same user - in authUsers it is the user id of an authorised user, in visitCounts, it is the count of visits by that same authorised user.;</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what was the most important relatioship between these two arrays.  It is that the corresponding pairs of element hold information about the same user - look at the doodles pane to see a fuller explanation, and also the key consequence of this insight.</explanation>
</step>
<step num = "30">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="380bb914-a905-4c97-9f14-2aae0bf8cc63">    # Now return the user id that corresponds to the max count just found;</fragname>
<operation>Insert</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="514c7b00-1998-4fa0-9787-ae4a84a07139">    posOfMaxSoFar = 0;</fragname>
<operation>Insert</operation>
</change>
<change num = "3">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="24a52751-1ed6-4c84-98bd-aac33909fea2">    # Find position in the list of the largest count (find max);</fragname>
<operation>Insert</operation>
</change>
<explanation>This insight guides how the &quot;find max&quot; code should be structured.  It's the position of the max value we want in the end, not the max value itself.  So, let's start by creating a variable to hold this position.
Note a key assumption we're making here.  We're assuming that, before we've seen any other values, the largest value is in the zeroth element of the array.  This makes sense, doesn't it?  Considering ONLY the first value, it must be the largest!  This may change of course, once we look at the remaining values in the array.</explanation>
</step>
<step num = "31">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "31" content="For this find max problem, how many of the visitCount values in the array do we need to look at?" type="MULTI_CHOICE">
<option num ="0"  content="1"></option>
<option num ="1"  content="some, but not necessarily all, we can't tell in advance"></option>
<option num ="2"  content="one less than the total number"></option>
<option num ="3"  content="all of them"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "32">
<explanation>We asked how many of the visitCount values we need to look at.  Well, to start with, we assume the first one is the largest.  We only need now to look at the rest - so that's &quot;one less than the total number&quot;.
We know at the start of the loop how many this is, so we can used a fixed loop - a for loop in Python.  Before writing in the for loop header, let's consider another issue...</explanation>
</step>
<step num = "33">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="68fa792c-c664-4e9c-bacb-bcd5ec20d639">    for currentPos in range( 1,len( visitCounts ) ):;</fragname>
<operation>Insert</operation>
</change>
<explanation>SCANNING A COLLECTION: GENERATE VALUES OR INDEXES?
When using a Python for loop, it's important to ask this question - do we just want to look at each value, or is it the position/index that's important
In this case, as we've discussed, it's the position that's important, so we create a for loop that scans over the indexes into the array, not the values themselves.
Look carefully at the call to the range function - is this right?
</explanation>
</step>
<step num = "34">
<explanation>Yes, it's right.  We need to scan from the first element, not the zeroth element, in the array.  By specifying up to the length of the the array, we end up with a range running to one less than this value - which is correct for a Python array.</explanation>
</step>
<step num = "35">
<explanation>Now for the body of the loop.  How does a &quot;find max&quot; work?  Recall this before proceeding...</explanation>
</step>
<step num = "36">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="5cf26ec0-3881-492a-8124-01df46da106a">        if visitCounts[ posOfMaxSoFar ] &lt; visitCounts[ currentPos ]:;</fragname>
<operation>Insert</operation>
</change>
<explanation>On each loop, we need to check whether the value we're looking at in the array is larger than the largest we've seen so far.  &quot;posOfMaxSoFar&quot; holds the position of the largest we've seen so far.  So we need to check whether the value stored at this position is smaller than the value at the current position...</explanation>
</step>
<step num = "37">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="ff5e37e8-9b31-4704-9efc-1bf50872583e">            posOfMaxSoFar = currentPos;</fragname>
<operation>Insert</operation>
</change>
<explanation>If it is smaller, then it is the current position we now want to remember, as it is the largest we've now seen.  So update the &quot;posOfMaxSoFar&quot; variable accordingly...</explanation>
</step>
<step num = "38">
<explanation>We're nearly done.  We have the position in the countVisits array - what shall we replace the ??? in the return statement (remember what the function should be returning...)?</explanation>
</step>
<step num = "39">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "39" content="What should replace the ??? in the return statement?" type="MULTI_CHOICE">
<option num ="0"  content="posOfMaxSoFar"></option>
<option num ="1"  content="visitCounts( PosOfMaxSoFar )"></option>
<option num ="2"  content="authUsers( PosOfMaxSoFar )"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "40">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="5fbba032-a9b0-4622-880e-97984f0b1663">???</fragname>
<operation>Delete</operation>
</change>
<change num = "2">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="dd059f20-257a-48a7-865d-e5e7f13ee87c">authUsers[ posOfMaxSoFar ]</fragname>
<operation>Insert</operation>
</change>
<explanation>We asked what to replace the ??? in the return statement with.  Remember the insight we had about the two arrays - each corresponding pair of values refer to the same user.  We have the position of the larger entry count.  We can use that same position as the index to get the user id of the user who entered the most - as shown here.
</explanation>
</step>
<step num = "41">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "41" content="Looking at the code closely, what will happen if  two or more users tie for the top visit count? " type="MULTI_CHOICE">
<option num ="0"  content="The program will crash."></option>
<option num ="1"  content="The first of the tied top users to appear in the authUsers array will be returned as the top visitor"></option>
<option num ="2"  content="The last of the tied users to appear in the authUsers array will be returned as the top visitor"></option>
<option num ="3"  content="All the tied top users will be returned "></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "42">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="5cf26ec0-3881-492a-8124-01df46da106a">        if visitCounts[ posOfMaxSoFar ] &lt; visitCounts[ currentPos ]:;</fragname>
<operation>Highlight</operation>
</change>
<explanation>We asked what would happen if many users had the same top visit count.  Firstly, we might like the idea of the program somehow returning all the top users, but this simply isn't in the code - it can only possibly return one user, as shown by the last line - the return statement.  Hence the last answer is wrong.  To answer this, you need to know EXACTLY what causes a new top user to be chosen.... look at the highlighted line.  This holds the condition for whether to update the top user.  What is it testing for?</explanation>
</step>
<step num = "43">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<operation>Ask Answer</operation>
<question num = "43" content="Pick the best ending to the following statement.  &quot;The condition in the if statement will return true when ...&quot;" type="MULTI_CHOICE">
<option num ="0"  content="the visit count we're currently looking at is greater than the best seen so far. "></option>
<option num ="1"  content="the best visit count we've seen so far is less than or equal to the one we're looking at on this loop."></option>
<option num ="2"  content="the best visit count so far is greater than the one we're looking at on this loop. "></option>
<option num ="3"  content="&lt;something else&gt;"></option>
</question>
</change>
<explanation>No explanation</explanation>
</step>
<step num = "44">
<change num = "1">
<docname>mostFrequentVisitorSolutionPython</docname>
<fragname id="5cf26ec0-3881-492a-8124-01df46da106a">        if visitCounts[ posOfMaxSoFar ] &lt; visitCounts[ currentPos ]:;</fragname>
<operation>Unhighlight</operation>
</change>
<explanation>We asked about the condition in the if statement.  It will return true when the one we're looking at on this loop is greater than thebest count seen so far.  If the best count is the SAME AS the current count, then the condition returns false and we do not update posOfMaxSoFar.  So, to answer the earlier question, we can now see that the best position is  recorded for the FIRST occurrence of a top value - if the same value appears again, it is ignored.  Hence in the earlier question, it is the second answer that is correct - &quot;The first of the tied top users to appear in the authUsers array will be returned as top visitor.&quot;</explanation>
</step>
<step num = "45">
<explanation>This is an acceptable solution to the problem. We've solved it in two stages - calculate all the visit counts, then scan through these counts to find the largest.
The array of counts is only created to then be searched through, and is then discarded once the function has returned its value.  This is a little inefficient.  It is possible to merge these two phases together, to create a conceptually simpler solution, and avoid creating the array of counts altogether.  As a follow-on exercise, you could try this for yourself.</explanation>
</step>
</process>
</processes>
